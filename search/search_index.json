{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Hello World!"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/","text":"\u30d1\u30ca\u30bd\u30cb\u30c3\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\uff08AtCoder Beginner Contest 186\uff09 \u632f\u308a\u8fd4\u308a \u00b6 11:21\u30673\u5b8c\u4e0b\u6ed1\u308a\u51fa\u3057\u306f\u826f\u304b\u3063\u305f\u304c\u3001D\u554f\u984c\u3067\u7d76\u5bfe\u5024\u306e\u8003\u616e\u3092\u305b\u305a\u306b\u8a08\u7b97\u3057\u3001\u5024\u304c\u3042\u308f\u305a\u767a\u72c2\u3057\u3066\u6642\u9593\u3092\u98df\u3063\u3066\u3057\u307e\u3063\u305f\u3002 A - Brick \u00b6 \u554f\u984c\u6587: A - Brick \u8003\u3048\u305f\u3053\u3068 \u00b6 \u6574\u6570\u306e\u5207\u308a\u6368\u3066\u9664\u7b97 Note \u5165\u529b\u4f8b \u00b6 10 3 \u51fa\u529b\u4f8b \u00b6 3 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n , w := ni (), ni () fmt . Println ( n / w ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } B - Blocks on Grid \u00b6 \u554f\u984c\u6587: B - Blocks on Grid \u8003\u3048\u305f\u3053\u3068 \u00b6 \u30b0\u30ea\u30c3\u30c9\u72b6\u306e\u30de\u30b9\u76ee\u81ea\u4f53\u306b\u610f\u5473\u306f\u306a\u3044\u306e\u30671\u6b21\u5143\u914d\u5217\u3067\u5168\u8981\u7d20\u306e\u6700\u5c0f\u5024\u3068\u5408\u8a08\u5024\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u89e3\u304f\u3002 \u5168\u3066\u306e\u5024\u3092\u6700\u5c0f\u5024\u306b\u308c\u3070\u3044\u3044\u306e\u3067 \\sum_{i=0}^{HW}A_i-min(A) = sum(A)-min(A)\\times H\\times W \\sum_{i=0}^{HW}A_i-min(A) = sum(A)-min(A)\\times H\\times W Note \u5165\u529b\u4f8b \u00b6 2 3 2 2 3 3 2 2 \u51fa\u529b\u4f8b \u00b6 2 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) func main () { h , w := ni (), ni () a := nis ( h * w ) min := min ( a ... ) sum := sum ( a ... ) fmt . Println ( sum - min * h * w ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int ; res := make ([] int , size ); for i := range res { fmt . Fscan ( r , & n ); res [ i ]= n }; return res } func min ( a ... int ) int { if len ( a ) == 0 { return 0 }; ret := a [ 0 ]; for _ , e := range a { if e < ret { ret = e }}; return ret } func sum ( a ... int )( sum int ){ for _ , e := range a { sum += e }; return } C - Unlucky 7 \u00b6 \u554f\u984c\u6587: C - Unlucky 7 \u8003\u3048\u305f\u3053\u3068 \u00b6 \u6574\u6570 1~N 1~N \u306b\u3064\u3044\u306610\u9032\u6570\u30688\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u306b\u5bfe\u3057\u30667\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u6587\u5b57\u5217\u64cd\u4f5c Go\u8a00\u8a9e\u3067\u306f fmt.Sprintf(\"%o\", i) \u30678\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 Note \u5165\u529b\u4f8b \u00b6 100000 \u51fa\u529b\u4f8b \u00b6 30555 AC package main import ( \"bufio\" \"fmt\" \"os\" \"strings\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () fmt . Println ( solve ( n )) } func solve ( n int ) ( ans int ) { for i := 1 ; i <= n ; i ++ { if s := fmt . Sprintf ( \"%o\" , i ); strings . Contains ( s , \"7\" ) { continue } if s := fmt . Sprintf ( \"%d\" , i ); strings . Contains ( s , \"7\" ) { continue } ans ++ } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } D - Sum of difference \u00b6 \u554f\u984c\u6587: D - Sum of difference \u8003\u3048\u305f\u3053\u3068 \u00b6 N\\leq 2\\times 10^5 N\\leq 2\\times 10^5 \u306a\u306e\u3067 i,j i,j \u3092\u5168\u3066\u8a66\u3059 O(N^2) O(N^2) \u306f\u9593\u306b\u5408\u308f\u306a\u3044\u3002 \u5168\u3066\u306e i, j i, j \u3092\u8a66\u3059\u306e\u3067 A A \u306e\u8981\u7d20\u306f\u30bd\u30fc\u30c8\u3057\u3066\u3082\u7d50\u679c\u306f\u5909\u308f\u3089\u305a\u3001\u30bd\u30fc\u30c8\u3092\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u7d76\u5bfe\u5024\u3092\u8003\u616e\u3057\u306a\u304f\u3066\u826f\u304f\u306a\u308b\u3002 Note \u5165\u529b\u4f8b \u00b6 5 31 41 59 26 53 \u51fa\u529b\u4f8b \u00b6 176 AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () a := nis ( n ) sort . Ints ( a ) fmt . Println ( solve ( n , a )) } func solve ( n int , a [] int ) ( ans int ) { suma := sum ( a ... ) for i := 0 ; i < n - 1 ; i ++ { suma -= a [ i ] c := a [ i ] * ( n - 1 - i ) c -= suma ans += - c } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } func sum ( a ... int ) ( sum int ) { for _ , e := range a { sum += e } return }","title":"\u3010ABC186\u3011A~D\u554f\u984c"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_1","text":"11:21\u30673\u5b8c\u4e0b\u6ed1\u308a\u51fa\u3057\u306f\u826f\u304b\u3063\u305f\u304c\u3001D\u554f\u984c\u3067\u7d76\u5bfe\u5024\u306e\u8003\u616e\u3092\u305b\u305a\u306b\u8a08\u7b97\u3057\u3001\u5024\u304c\u3042\u308f\u305a\u767a\u72c2\u3057\u3066\u6642\u9593\u3092\u98df\u3063\u3066\u3057\u307e\u3063\u305f\u3002","title":"\u632f\u308a\u8fd4\u308a"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#a-brick","text":"\u554f\u984c\u6587: A - Brick","title":"A - Brick"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_2","text":"\u6574\u6570\u306e\u5207\u308a\u6368\u3066\u9664\u7b97 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_3","text":"10 3","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_4","text":"3 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n , w := ni (), ni () fmt . Println ( n / w ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#b-blocks-on-grid","text":"\u554f\u984c\u6587: B - Blocks on Grid","title":"B - Blocks on Grid"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_5","text":"\u30b0\u30ea\u30c3\u30c9\u72b6\u306e\u30de\u30b9\u76ee\u81ea\u4f53\u306b\u610f\u5473\u306f\u306a\u3044\u306e\u30671\u6b21\u5143\u914d\u5217\u3067\u5168\u8981\u7d20\u306e\u6700\u5c0f\u5024\u3068\u5408\u8a08\u5024\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u89e3\u304f\u3002 \u5168\u3066\u306e\u5024\u3092\u6700\u5c0f\u5024\u306b\u308c\u3070\u3044\u3044\u306e\u3067 \\sum_{i=0}^{HW}A_i-min(A) = sum(A)-min(A)\\times H\\times W \\sum_{i=0}^{HW}A_i-min(A) = sum(A)-min(A)\\times H\\times W Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_6","text":"2 3 2 2 3 3 2 2","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_7","text":"2 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) func main () { h , w := ni (), ni () a := nis ( h * w ) min := min ( a ... ) sum := sum ( a ... ) fmt . Println ( sum - min * h * w ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int ; res := make ([] int , size ); for i := range res { fmt . Fscan ( r , & n ); res [ i ]= n }; return res } func min ( a ... int ) int { if len ( a ) == 0 { return 0 }; ret := a [ 0 ]; for _ , e := range a { if e < ret { ret = e }}; return ret } func sum ( a ... int )( sum int ){ for _ , e := range a { sum += e }; return }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#c-unlucky-7","text":"\u554f\u984c\u6587: C - Unlucky 7","title":"C - Unlucky 7"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_8","text":"\u6574\u6570 1~N 1~N \u306b\u3064\u3044\u306610\u9032\u6570\u30688\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u306b\u5bfe\u3057\u30667\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u6587\u5b57\u5217\u64cd\u4f5c Go\u8a00\u8a9e\u3067\u306f fmt.Sprintf(\"%o\", i) \u30678\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_9","text":"100000","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_10","text":"30555 AC package main import ( \"bufio\" \"fmt\" \"os\" \"strings\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () fmt . Println ( solve ( n )) } func solve ( n int ) ( ans int ) { for i := 1 ; i <= n ; i ++ { if s := fmt . Sprintf ( \"%o\" , i ); strings . Contains ( s , \"7\" ) { continue } if s := fmt . Sprintf ( \"%d\" , i ); strings . Contains ( s , \"7\" ) { continue } ans ++ } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#d-sum-of-difference","text":"\u554f\u984c\u6587: D - Sum of difference","title":"D - Sum of difference"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_11","text":"N\\leq 2\\times 10^5 N\\leq 2\\times 10^5 \u306a\u306e\u3067 i,j i,j \u3092\u5168\u3066\u8a66\u3059 O(N^2) O(N^2) \u306f\u9593\u306b\u5408\u308f\u306a\u3044\u3002 \u5168\u3066\u306e i, j i, j \u3092\u8a66\u3059\u306e\u3067 A A \u306e\u8981\u7d20\u306f\u30bd\u30fc\u30c8\u3057\u3066\u3082\u7d50\u679c\u306f\u5909\u308f\u3089\u305a\u3001\u30bd\u30fc\u30c8\u3092\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u7d76\u5bfe\u5024\u3092\u8003\u616e\u3057\u306a\u304f\u3066\u826f\u304f\u306a\u308b\u3002 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_12","text":"5 31 41 59 26 53","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2d/#_13","text":"176 AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () a := nis ( n ) sort . Ints ( a ) fmt . Println ( solve ( n , a )) } func solve ( n int , a [] int ) ( ans int ) { suma := sum ( a ... ) for i := 0 ; i < n - 1 ; i ++ { suma -= a [ i ] c := a [ i ] * ( n - 1 - i ) c -= suma ans += - c } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } func sum ( a ... int ) ( sum int ) { for _ , e := range a { sum += e } return }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/","text":"AtCoder Beginner Contest 188 A - Three-Point Shot \u00b6 \u554f\u984c\u6587: https://atcoder.jp/contests/abc188/tasks/abc188_a \u8003\u3048\u305f\u3053\u3068 \u00b6 \u554f\u984c\u6587\u306e\u901a\u308a\u306b\u5b9f\u88c5 Note \u5165\u529b\u4f8b \u00b6 12 15 \u51fa\u529b\u4f8b \u00b6 No AC package main import ( \"fmt\" ) func main () { var X , Y int fmt . Scan ( & X , & Y ) fmt . Println ( solve ( X , Y )) } func solve ( a , b int ) string { if a > b { a , b = b , a } if a + 3 > b { return \"Yes\" } return \"No\" } B - Orthogonality \u00b6 \u554f\u984c\u6587: https://atcoder.jp/contests/abc188/tasks/abc188_b \u8003\u3048\u305f\u3053\u3068 \u00b6 \u5185\u7a4d\u306e\u8a08\u7b97\u30d1\u30fc\u30c8\u3068\u3001\u8a08\u7b97\u7d50\u679c\u306e\u5224\u5b9a\u30d1\u30fc\u30c8 Note \u5165\u529b\u4f8b \u00b6 3 1 3 5 3 -6 3 \u51fa\u529b\u4f8b \u00b6 Yes AC package main import ( \"bufio\" \"os\" \"fmt\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () a , b := nis ( n ), nis ( n ) var cnt int for i := 0 ; i < n ; i ++ { cnt += a [ i ] * b [ i ] } if cnt == 0 { fmt . Println ( \"Yes\" ) } else { fmt . Println ( \"No\" ) } } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int ; res := make ([] int , size ); for i := range res { fmt . Fscan ( r , & n ); res [ i ]= n }; return res } C - ABC Tournament \u00b6 \u554f\u984c\u6587: https://atcoder.jp/contests/abc188/tasks/abc188_c \u8003\u3048\u305f\u3053\u3068 \u00b6 \u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u554f\u984c \u9078\u624b\u65702~65536\u4eba \u611a\u76f4\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u3066\u3082 O(2^N) O(2^N) \u3067\u9593\u306b\u5408\u3046 Note \u5165\u529b\u4f8b \u00b6 4 6 13 12 5 3 7 10 11 16 9 8 15 2 1 14 4 \u51fa\u529b\u4f8b \u00b6 2 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) type player struct { id int rate int } func main () { n := ni () ps := make ([] player , 1 << n ) for i := range ps { ps [ i ]. id = i + 1 ps [ i ]. rate = ni () } _ , loser := solve ( ps ) fmt . Println ( loser . id ) } func solve ( ps [] player ) ( player , player ) { lenps := len ( ps ) if lenps == 2 { return battle ( ps [ 0 ], ps [ 1 ]) } aw , _ := solve ( ps [: lenps / 2 ]) bw , _ := solve ( ps [ lenps / 2 :]) return battle ( aw , bw ) } // \u52dd\u8005, \u6557\u8005 \u306e\u9806\u3067\u8fd4\u3059 func battle ( a , b player ) ( player , player ) { if a . rate > b . rate { return a , b } return b , a } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } After Contest \u00b6 \u89e3\u8aac\u306e \u89e3\u6cd52 \u3067 \u5f15\u7528 \u6e96\u512a\u52dd\u3059\u308b\u306e\u306f\u3001\u512a\u52dd\u3059\u308b( = \u4e00\u756a\u30ec\u30fc\u30c8\u304c\u9ad8\u3044) \u9078\u624b\u3068\u306f\u9006\u5074\u306e\u30d6\u30ed\u30c3\u30af\u306b\u3044\u308b\u9078\u624b\u306e\u3046\u3061\u4e00\u756a\u30ec\u30fc\u30c8\u304c\u9ad8\u3044\u4eba\u3067\u3059\u3002 \u3068\u3042\u3063\u305f\u8a00\u308f\u308c\u3066\u307f\u308c\u3070\u3068\u3044\u3046\u611f\u3058 \u6b21\u306b\u540c\u3058\u3088\u3046\u306a\u554f\u984c\u304c\u304d\u305f\u5834\u5408\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u3044 D - Snuke Prime \u00b6 \u554f\u984c\u6587: https://atcoder.jp/contests/abc188/tasks/abc188_d \u8003\u3048\u305f\u3053\u3068 \u00b6 \u533a\u9593\u52a0\u7b97\u554f\u984c a_i \\leq b_i \\leq 1e9 a_i \\leq b_i \\leq 1e9 \u304c\u30cd\u30c3\u30af -> \u51fa\u5165\u308a\u53e3\u3067\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u7528\u3044\u308b\u3044\u3082\u3059\u6cd5\u304c\u4f7f\u7528\u3067\u304d\u306a\u3044 N \\leq 2e5 N \\leq 2e5 \u306a\u306e\u3067 O(NlogN) O(NlogN) \u3067\u306e\u89e3\u6cd5\u3092\u8003\u616e package main import ( \"bufio\" \"os\" \"fmt\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) type event struct { day int cost int } func main () { n , C := ni (), ni () es := make ([] event , 2 * n ) for i := 0 ; i < n ; i ++ { a , b , c := ni () - 1 , ni (), ni () es [ i * 2 ] = event { a , c } es [ i * 2 + 1 ] = event { b , - c } } sort . Slice ( es , func ( i , j int ) bool { return es [ i ]. day < es [ j ]. day }) var ans , fee , eventStart int for _ , e := range es { nowTime := e . day if nowTime != eventStart { ans += min ( C , fee ) * ( nowTime - eventStart ) eventStart = nowTime } fee += e . cost } fmt . Println ( ans ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int ; res := make ([] int , size ); for i := range res { fmt . Fscan ( r , & n ); res [ i ]= n }; return res } func min ( a ... int ) int { if len ( a ) == 0 { return 0 }; ret := a [ 0 ]; for _ , e := range a { if e < ret { ret = e }}; return ret } \u53cd\u7701 \u00b6 \u533a\u9593\u52a0\u7b97\u554f\u984c\u306f\u4eca\u307e\u3067\u3044\u3082\u3059\u6cd5\u3092\u7528\u3044\u308b\u3082\u306e\u3057\u304b\u89e3\u3044\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u30b3\u30f3\u30c6\u30b9\u30c8\u4e2d\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f N N \u306e\u5236\u7d04\u3084\u3001\u6599\u91d1\u306e\u66f4\u65b0\u304c\u958b\u59cb\u65e5\u3068\u7d42\u4e86\u65e5\u306b\u3057\u304b\u8d77\u3053\u3089\u306a\u3044\u70b9\u3092\u3082\u3046\u5c11\u3057\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u308c\u3070\u89e3\u3051\u305f\u306e\u3067\u306f\u306a\u3044\u304b","title":"\u3010ABC188\u3011A~D\u554f\u984c"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#a-three-point-shot","text":"\u554f\u984c\u6587: https://atcoder.jp/contests/abc188/tasks/abc188_a","title":"A - Three-Point Shot"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_1","text":"\u554f\u984c\u6587\u306e\u901a\u308a\u306b\u5b9f\u88c5 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_2","text":"12 15","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_3","text":"No AC package main import ( \"fmt\" ) func main () { var X , Y int fmt . Scan ( & X , & Y ) fmt . Println ( solve ( X , Y )) } func solve ( a , b int ) string { if a > b { a , b = b , a } if a + 3 > b { return \"Yes\" } return \"No\" }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#b-orthogonality","text":"\u554f\u984c\u6587: https://atcoder.jp/contests/abc188/tasks/abc188_b","title":"B - Orthogonality"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_4","text":"\u5185\u7a4d\u306e\u8a08\u7b97\u30d1\u30fc\u30c8\u3068\u3001\u8a08\u7b97\u7d50\u679c\u306e\u5224\u5b9a\u30d1\u30fc\u30c8 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_5","text":"3 1 3 5 3 -6 3","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_6","text":"Yes AC package main import ( \"bufio\" \"os\" \"fmt\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () a , b := nis ( n ), nis ( n ) var cnt int for i := 0 ; i < n ; i ++ { cnt += a [ i ] * b [ i ] } if cnt == 0 { fmt . Println ( \"Yes\" ) } else { fmt . Println ( \"No\" ) } } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int ; res := make ([] int , size ); for i := range res { fmt . Fscan ( r , & n ); res [ i ]= n }; return res }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#c-abc-tournament","text":"\u554f\u984c\u6587: https://atcoder.jp/contests/abc188/tasks/abc188_c","title":"C - ABC Tournament"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_7","text":"\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u554f\u984c \u9078\u624b\u65702~65536\u4eba \u611a\u76f4\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u3066\u3082 O(2^N) O(2^N) \u3067\u9593\u306b\u5408\u3046 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_8","text":"4 6 13 12 5 3 7 10 11 16 9 8 15 2 1 14 4","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_9","text":"2 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) type player struct { id int rate int } func main () { n := ni () ps := make ([] player , 1 << n ) for i := range ps { ps [ i ]. id = i + 1 ps [ i ]. rate = ni () } _ , loser := solve ( ps ) fmt . Println ( loser . id ) } func solve ( ps [] player ) ( player , player ) { lenps := len ( ps ) if lenps == 2 { return battle ( ps [ 0 ], ps [ 1 ]) } aw , _ := solve ( ps [: lenps / 2 ]) bw , _ := solve ( ps [ lenps / 2 :]) return battle ( aw , bw ) } // \u52dd\u8005, \u6557\u8005 \u306e\u9806\u3067\u8fd4\u3059 func battle ( a , b player ) ( player , player ) { if a . rate > b . rate { return a , b } return b , a } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#after-contest","text":"\u89e3\u8aac\u306e \u89e3\u6cd52 \u3067 \u5f15\u7528 \u6e96\u512a\u52dd\u3059\u308b\u306e\u306f\u3001\u512a\u52dd\u3059\u308b( = \u4e00\u756a\u30ec\u30fc\u30c8\u304c\u9ad8\u3044) \u9078\u624b\u3068\u306f\u9006\u5074\u306e\u30d6\u30ed\u30c3\u30af\u306b\u3044\u308b\u9078\u624b\u306e\u3046\u3061\u4e00\u756a\u30ec\u30fc\u30c8\u304c\u9ad8\u3044\u4eba\u3067\u3059\u3002 \u3068\u3042\u3063\u305f\u8a00\u308f\u308c\u3066\u307f\u308c\u3070\u3068\u3044\u3046\u611f\u3058 \u6b21\u306b\u540c\u3058\u3088\u3046\u306a\u554f\u984c\u304c\u304d\u305f\u5834\u5408\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u3044","title":"After Contest"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#d-snuke-prime","text":"\u554f\u984c\u6587: https://atcoder.jp/contests/abc188/tasks/abc188_d","title":"D - Snuke Prime"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_10","text":"\u533a\u9593\u52a0\u7b97\u554f\u984c a_i \\leq b_i \\leq 1e9 a_i \\leq b_i \\leq 1e9 \u304c\u30cd\u30c3\u30af -> \u51fa\u5165\u308a\u53e3\u3067\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u7528\u3044\u308b\u3044\u3082\u3059\u6cd5\u304c\u4f7f\u7528\u3067\u304d\u306a\u3044 N \\leq 2e5 N \\leq 2e5 \u306a\u306e\u3067 O(NlogN) O(NlogN) \u3067\u306e\u89e3\u6cd5\u3092\u8003\u616e package main import ( \"bufio\" \"os\" \"fmt\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) type event struct { day int cost int } func main () { n , C := ni (), ni () es := make ([] event , 2 * n ) for i := 0 ; i < n ; i ++ { a , b , c := ni () - 1 , ni (), ni () es [ i * 2 ] = event { a , c } es [ i * 2 + 1 ] = event { b , - c } } sort . Slice ( es , func ( i , j int ) bool { return es [ i ]. day < es [ j ]. day }) var ans , fee , eventStart int for _ , e := range es { nowTime := e . day if nowTime != eventStart { ans += min ( C , fee ) * ( nowTime - eventStart ) eventStart = nowTime } fee += e . cost } fmt . Println ( ans ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int ; res := make ([] int , size ); for i := range res { fmt . Fscan ( r , & n ); res [ i ]= n }; return res } func min ( a ... int ) int { if len ( a ) == 0 { return 0 }; ret := a [ 0 ]; for _ , e := range a { if e < ret { ret = e }}; return ret }","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC188_a2d/#_11","text":"\u533a\u9593\u52a0\u7b97\u554f\u984c\u306f\u4eca\u307e\u3067\u3044\u3082\u3059\u6cd5\u3092\u7528\u3044\u308b\u3082\u306e\u3057\u304b\u89e3\u3044\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u30b3\u30f3\u30c6\u30b9\u30c8\u4e2d\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f N N \u306e\u5236\u7d04\u3084\u3001\u6599\u91d1\u306e\u66f4\u65b0\u304c\u958b\u59cb\u65e5\u3068\u7d42\u4e86\u65e5\u306b\u3057\u304b\u8d77\u3053\u3089\u306a\u3044\u70b9\u3092\u3082\u3046\u5c11\u3057\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u308c\u3070\u89e3\u3051\u305f\u306e\u3067\u306f\u306a\u3044\u304b","title":"\u53cd\u7701"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/","text":"AtCoder Beginner Contest 190 A - Very Very Primitive Game \u00b6 https://atcoder.jp/contests/abc190/tasks/abc190_a \u8003\u3048\u305f\u3053\u3068 \u00b6 A == B A == B \u306e\u6642 \u5f8c\u653b\u304c\u52dd\u3064 A > B A > B \u306e\u6642 Takahashi \u304c\u52dd\u3064 A < B A < B \u306e\u6642 Aoki \u304c\u52dd\u3064 Note \u5165\u529b\u4f8b \u00b6 2 2 1 \u51fa\u529b\u4f8b \u00b6 Takahashi AC func main () { A , B , C := nextInt (), nextInt (), nextInt () fmt . Println ( solve ( A , B , C )) } func solve ( a , b , c int ) string { if a == b { if c == 0 { return \"Aoki\" } return \"Takahashi\" } if a > b { return \"Takahashi\" } return \"Aoki\" } After Contest \u00b6 B = B - C B = B - C \u3067\u5e38\u306b Takahashi \u5148\u624b\u3068\u540c\u7fa9 B - Magic 3 \u00b6 https://atcoder.jp/contests/abc190/tasks/abc190_b \u8003\u3048\u305f\u3053\u3068 \u00b6 \u305d\u306e\u307e\u307e\u5b9f\u88c5 Note \u5165\u529b\u4f8b \u00b6 7 100 100 10 11 12 67 192 79 154 197 142 158 20 25 17 108 \u51fa\u529b\u4f8b \u00b6 Yes AC func main () { N , S , D := nextInt (), nextInt (), nextInt () var cnt int for i := 0 ; i < N ; i ++ { x , y := nextInt (), nextInt () if x < S && y > D { cnt ++ } } if cnt > 0 { fmt . Println ( \"Yes\" ) } else { fmt . Println ( \"No\" ) } } C - Bowls and Dishes \u00b6 https://atcoder.jp/contests/abc190/tasks/abc190_c \u8003\u3048\u305f\u3053\u3068 \u00b6 K \\leq 16 K \\leq 16 \u30dc\u30fc\u30eb\u3092\u7f6e\u304f\u5168\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5168\u63a2\u7d22( O(2^K) O(2^K) ) Note \u5165\u529b\u4f8b \u00b6 6 12 2 3 4 6 1 2 4 5 2 6 1 5 4 5 1 3 1 2 2 6 2 3 2 5 5 3 5 1 4 2 6 4 6 5 6 \u51fa\u529b\u4f8b \u00b6 9 AC func main () { N , M := nextInt (), nextInt () AB := nextInts ( 2 * M ) K := nextInt () CD := nextInts ( 2 * K ) arr := [][] bool { make ([] bool , N )} for i := 0 ; i < K ; i ++ { c , d := CD [ i * 2 ] - 1 , CD [ i * 2 + 1 ] - 1 narr := [][] bool {} for j := range arr { narr = append ( narr , sara ( c , d , arr [ j ]) ... ) } arr = narr } var ans int for _ , s := range arr { var cnt int for i := 0 ; i < M ; i ++ { a , b := AB [ i * 2 ] - 1 , AB [ i * 2 + 1 ] - 1 if s [ a ] && s [ b ] { cnt ++ } } ans = maxOf ( ans , cnt ) } fmt . Println ( ans ) } func sara ( c , d int , a [] bool ) [][] bool { ca := make ([] bool , len ( a )) copy ( ca , a ) a [ c ] = true ca [ d ] = true return [][] bool { a , ca } } After Contest \u00b6 \u30b3\u30f3\u30c6\u30b9\u30c8\u4e2d\u306f\u518d\u5e30\u3067\u5168\u63a2\u7d22\u3057\u305f\u304c\u3001bit\u5168\u63a2\u7d22\u3067\u3082 func main () { N , M := nextInt (), nextInt () AB := nextInts ( 2 * M ) K := nextInt () CD := nextInts ( 2 * K ) var ans int for bit := 0 ; bit < 1 << K ; bit ++ { dish := make ([] bool , N ) for i := 0 ; i < K ; i ++ { c , d := CD [ i * 2 ] - 1 , CD [ i * 2 + 1 ] - 1 if bit >> i & 1 != 0 { dish [ c ] = true } else { dish [ d ] = true } } var cnt int for i := 0 ; i < M ; i ++ { a , b := AB [ i * 2 ] - 1 , AB [ i * 2 + 1 ] - 1 if dish [ a ] && dish [ b ] { cnt ++ } } ans = maxOf ( ans , cnt ) } fmt . Println ( ans ) } D - Staircase Sequences \u00b6 https://atcoder.jp/contests/abc190/tasks/abc190_d \u8003\u3048\u305f\u3053\u3068 \u00b6 N \\leq 10^{12} N \\leq 10^{12} \u3088\u308a \\sqrt{N} \\sqrt{N} \u89e3\u6cd5\u3092\u4e88\u60f3 \u7b49\u6bd4\u6570\u5217\u306e\u548c \\frac{1}{2}(2\\cdot begin + length-1)\\cdot length=N \\frac{1}{2}(2\\cdot begin + length-1)\\cdot length=N begin = \\frac{N}{length}-\\frac{length-1}{2} begin = \\frac{N}{length}-\\frac{length-1}{2} begin begin \u304c 1\u4ee5\u4e0a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u7b49\u5dee\u6570\u5217\u304c\u5b58\u5728\u3059\u308b\u6642, \u5bfe\u5fdc\u3059\u308b\u30001\u672a\u6e80\u306e\u8981\u7d20\u3092\u542b\u3080\u7b49\u5dee\u6570\u5217\u304c\u4e01\u5ea61\u3064\u5b58\u5728\u3059\u308b\u3002 [-begin+1, begin+length) [-begin+1, begin+length) , [begin, begin+length) [begin, begin+length) length length \u306f N N \u306e \u7d04\u6570\u3067\u3042\u308a, \u81ea\u7136\u6570 \u5c11\u3057\u30ac\u30d0\u30ac\u30d0\u3060\u3051\u3069\u66f8\u3044\u3066\u307f\u308b Note \u5165\u529b\u4f8b \u00b6 963761198400 \u51fa\u529b\u4f8b \u00b6 1920 AC func main () { N := nextInt () var ans int for _ , div := range divisors ( N ) { a := float64 ( N ) / float64 ( div ) - float64 ( div - 1 ) / 2 if a == float64 ( int ( a )) { ans += 2 } } fmt . Println ( ans ) } func divisors ( n int ) [] int { ret , a := [] int {}, [] int {} for i := 1 ; i * i <= n ; i ++ { if n % i != 0 { continue } ret = append ( ret , i ) if i * i != n { a = append ([] int { n / i }, a ... ) } } return append ( ret , a ... ) }","title":"\u3010ABC190\u3011A~D\u554f\u984c"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#a-very-very-primitive-game","text":"https://atcoder.jp/contests/abc190/tasks/abc190_a","title":"A - Very Very Primitive Game"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_1","text":"A == B A == B \u306e\u6642 \u5f8c\u653b\u304c\u52dd\u3064 A > B A > B \u306e\u6642 Takahashi \u304c\u52dd\u3064 A < B A < B \u306e\u6642 Aoki \u304c\u52dd\u3064 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_2","text":"2 2 1","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_3","text":"Takahashi AC func main () { A , B , C := nextInt (), nextInt (), nextInt () fmt . Println ( solve ( A , B , C )) } func solve ( a , b , c int ) string { if a == b { if c == 0 { return \"Aoki\" } return \"Takahashi\" } if a > b { return \"Takahashi\" } return \"Aoki\" }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#after-contest","text":"B = B - C B = B - C \u3067\u5e38\u306b Takahashi \u5148\u624b\u3068\u540c\u7fa9","title":"After Contest"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#b-magic-3","text":"https://atcoder.jp/contests/abc190/tasks/abc190_b","title":"B - Magic 3"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_4","text":"\u305d\u306e\u307e\u307e\u5b9f\u88c5 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_5","text":"7 100 100 10 11 12 67 192 79 154 197 142 158 20 25 17 108","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_6","text":"Yes AC func main () { N , S , D := nextInt (), nextInt (), nextInt () var cnt int for i := 0 ; i < N ; i ++ { x , y := nextInt (), nextInt () if x < S && y > D { cnt ++ } } if cnt > 0 { fmt . Println ( \"Yes\" ) } else { fmt . Println ( \"No\" ) } }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#c-bowls-and-dishes","text":"https://atcoder.jp/contests/abc190/tasks/abc190_c","title":"C - Bowls and Dishes"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_7","text":"K \\leq 16 K \\leq 16 \u30dc\u30fc\u30eb\u3092\u7f6e\u304f\u5168\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5168\u63a2\u7d22( O(2^K) O(2^K) ) Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_8","text":"6 12 2 3 4 6 1 2 4 5 2 6 1 5 4 5 1 3 1 2 2 6 2 3 2 5 5 3 5 1 4 2 6 4 6 5 6","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_9","text":"9 AC func main () { N , M := nextInt (), nextInt () AB := nextInts ( 2 * M ) K := nextInt () CD := nextInts ( 2 * K ) arr := [][] bool { make ([] bool , N )} for i := 0 ; i < K ; i ++ { c , d := CD [ i * 2 ] - 1 , CD [ i * 2 + 1 ] - 1 narr := [][] bool {} for j := range arr { narr = append ( narr , sara ( c , d , arr [ j ]) ... ) } arr = narr } var ans int for _ , s := range arr { var cnt int for i := 0 ; i < M ; i ++ { a , b := AB [ i * 2 ] - 1 , AB [ i * 2 + 1 ] - 1 if s [ a ] && s [ b ] { cnt ++ } } ans = maxOf ( ans , cnt ) } fmt . Println ( ans ) } func sara ( c , d int , a [] bool ) [][] bool { ca := make ([] bool , len ( a )) copy ( ca , a ) a [ c ] = true ca [ d ] = true return [][] bool { a , ca } }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#after-contest_1","text":"\u30b3\u30f3\u30c6\u30b9\u30c8\u4e2d\u306f\u518d\u5e30\u3067\u5168\u63a2\u7d22\u3057\u305f\u304c\u3001bit\u5168\u63a2\u7d22\u3067\u3082 func main () { N , M := nextInt (), nextInt () AB := nextInts ( 2 * M ) K := nextInt () CD := nextInts ( 2 * K ) var ans int for bit := 0 ; bit < 1 << K ; bit ++ { dish := make ([] bool , N ) for i := 0 ; i < K ; i ++ { c , d := CD [ i * 2 ] - 1 , CD [ i * 2 + 1 ] - 1 if bit >> i & 1 != 0 { dish [ c ] = true } else { dish [ d ] = true } } var cnt int for i := 0 ; i < M ; i ++ { a , b := AB [ i * 2 ] - 1 , AB [ i * 2 + 1 ] - 1 if dish [ a ] && dish [ b ] { cnt ++ } } ans = maxOf ( ans , cnt ) } fmt . Println ( ans ) }","title":"After Contest"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#d-staircase-sequences","text":"https://atcoder.jp/contests/abc190/tasks/abc190_d","title":"D - Staircase Sequences"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_10","text":"N \\leq 10^{12} N \\leq 10^{12} \u3088\u308a \\sqrt{N} \\sqrt{N} \u89e3\u6cd5\u3092\u4e88\u60f3 \u7b49\u6bd4\u6570\u5217\u306e\u548c \\frac{1}{2}(2\\cdot begin + length-1)\\cdot length=N \\frac{1}{2}(2\\cdot begin + length-1)\\cdot length=N begin = \\frac{N}{length}-\\frac{length-1}{2} begin = \\frac{N}{length}-\\frac{length-1}{2} begin begin \u304c 1\u4ee5\u4e0a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u7b49\u5dee\u6570\u5217\u304c\u5b58\u5728\u3059\u308b\u6642, \u5bfe\u5fdc\u3059\u308b\u30001\u672a\u6e80\u306e\u8981\u7d20\u3092\u542b\u3080\u7b49\u5dee\u6570\u5217\u304c\u4e01\u5ea61\u3064\u5b58\u5728\u3059\u308b\u3002 [-begin+1, begin+length) [-begin+1, begin+length) , [begin, begin+length) [begin, begin+length) length length \u306f N N \u306e \u7d04\u6570\u3067\u3042\u308a, \u81ea\u7136\u6570 \u5c11\u3057\u30ac\u30d0\u30ac\u30d0\u3060\u3051\u3069\u66f8\u3044\u3066\u307f\u308b Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_11","text":"963761198400","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC190_a2d/#_12","text":"1920 AC func main () { N := nextInt () var ans int for _ , div := range divisors ( N ) { a := float64 ( N ) / float64 ( div ) - float64 ( div - 1 ) / 2 if a == float64 ( int ( a )) { ans += 2 } } fmt . Println ( ans ) } func divisors ( n int ) [] int { ret , a := [] int {}, [] int {} for i := 1 ; i * i <= n ; i ++ { if n % i != 0 { continue } ret = append ( ret , i ) if i * i != n { a = append ([] int { n / i }, a ... ) } } return append ( ret , a ... ) }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderRegularContest/ARC110/b/","text":"AC package main import ( \"bufio\" \"fmt\" \"os\" \"strings\" ) var r = bufio . NewReader ( os . Stdin ) func main () { fmt . Println ( solve ()) } func solve () int { N := ni () T := ns () if N == 1 { switch T { case \"1\" : return 2e10 case \"0\" : return 1e10 default : return 0 } } var f func ( a , b string ) bool f = strings . HasPrefix if f ( T , \"10\" ) { T = \"1\" + T } else if f ( T , \"01\" ) { T = \"11\" + T } f = strings . HasSuffix if f ( T , \"11\" ) { T += \"0\" } else if f ( T , \"01\" ) { T += \"10\" } if T == strings . Repeat ( \"110\" , len ( T ) / 3 ) { return 1e10 - len ( T ) / 3 + 1 } return 0 } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s }","title":"\u3010ARC110\u3011B - Many 110"},{"location":"AtCoder/PAST/past201912_a/","text":"\u554f\u984c\u6982\u8981 \u00b6 A - 2 \u500d\u30c1\u30a7\u30c3\u30af \u8003\u3048\u65b9 \u00b6 strconv.Atoi \u306b\u6574\u6570\u5909\u63db\u3092\u4e38\u6295\u3052\u3057\u3066\u3001\u6210\u529f\u3059\u308c\u30702\u500d\u306b\u3057\u3066\u8fd4\u3059\u3001\u5931\u6557\u3059\u308c\u3070 error \u3092\u8fd4\u3059\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" \"strconv\" ) var r = bufio . NewReader ( os . Stdin ) func main () { S := ns () fmt . Println ( solve ( S )) } func solve ( S string ) string { i , err := strconv . Atoi ( S ) if err != nil { return \"error\" } return strconv . Itoa ( i * 2 ) } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s } submission","title":"\u3010PAST#01\u3011A - 2 \u500d\u30c1\u30a7\u30c3\u30af"},{"location":"AtCoder/PAST/past201912_a/#_1","text":"A - 2 \u500d\u30c1\u30a7\u30c3\u30af","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_a/#_2","text":"strconv.Atoi \u306b\u6574\u6570\u5909\u63db\u3092\u4e38\u6295\u3052\u3057\u3066\u3001\u6210\u529f\u3059\u308c\u30702\u500d\u306b\u3057\u3066\u8fd4\u3059\u3001\u5931\u6557\u3059\u308c\u3070 error \u3092\u8fd4\u3059\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" \"strconv\" ) var r = bufio . NewReader ( os . Stdin ) func main () { S := ns () fmt . Println ( solve ( S )) } func solve ( S string ) string { i , err := strconv . Atoi ( S ) if err != nil { return \"error\" } return strconv . Itoa ( i * 2 ) } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_b/","text":"\u554f\u984c\u6982\u8981 \u00b6 B - \u5897\u6e1b\u7ba1\u7406 \u8003\u3048\u65b9 \u00b6 A_{i+1} A_{i+1} \u3068 A_i A_i \u306e\u5224\u5b9a\u3092 N-1 N-1 \u56de\u884c\u3046\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N int var A [] int func main () { N = ni () A = nis ( N ) solve () } func solve () { for i := 0 ; i < N - 1 ; i ++ { fmt . Println ( check ( i )) } } func check ( i int ) string { a := A [ i + 1 ] - A [ i ] switch { case a == 0 : return \"stay\" case a < 0 : return fmt . Sprintf ( \"down %d\" , - a ) default : return fmt . Sprintf ( \"up %d\" , a ) } } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u3010PAST#01\u3011B - \u5897\u6e1b\u7ba1\u7406"},{"location":"AtCoder/PAST/past201912_b/#_1","text":"B - \u5897\u6e1b\u7ba1\u7406","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_b/#_2","text":"A_{i+1} A_{i+1} \u3068 A_i A_i \u306e\u5224\u5b9a\u3092 N-1 N-1 \u56de\u884c\u3046\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N int var A [] int func main () { N = ni () A = nis ( N ) solve () } func solve () { for i := 0 ; i < N - 1 ; i ++ { fmt . Println ( check ( i )) } } func check ( i int ) string { a := A [ i + 1 ] - A [ i ] switch { case a == 0 : return \"stay\" case a < 0 : return fmt . Sprintf ( \"down %d\" , - a ) default : return fmt . Sprintf ( \"up %d\" , a ) } } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_c/","text":"\u554f\u984c\u6982\u8981 \u00b6 C - 3 \u756a\u76ee \u8003\u3048\u65b9 \u00b6 \u30bd\u30fc\u30c8\u3057\u30663\u756a\u76ee(\u6607\u98064\u756a\u76ee) AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) func main () { solve () } func solve () { A := nis ( 6 ) sort . Ints ( A ) fmt . Println ( A [ 3 ]) } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u3010PAST#01\u3011C - 3 \u756a\u76ee"},{"location":"AtCoder/PAST/past201912_c/#_1","text":"C - 3 \u756a\u76ee","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_c/#_2","text":"\u30bd\u30fc\u30c8\u3057\u30663\u756a\u76ee(\u6607\u98064\u756a\u76ee) AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) func main () { solve () } func solve () { A := nis ( 6 ) sort . Ints ( A ) fmt . Println ( A [ 3 ]) } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_d/","text":"\u554f\u984c\u6982\u8981 \u00b6 D - \u91cd\u8907\u691c\u67fb \u8003\u3048\u65b9 \u00b6 \u6574\u6570\u5217 A A \u3092 1 1 \u304b\u3089 N N \u307e\u3067\u8d70\u67fb\u3057\u3066\u66f8\u304d\u63db\u3048\u304c\u306a\u3051\u308c\u3070 Correct \u66f8\u304d\u63db\u3048\u304c\u3042\u308c\u3070\u66f8\u304d\u63db\u308f\u3063\u305f\u6587\u5b57\u3092\u63a2\u7d22\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N int var A [] int func main () { N = ni () A = nis ( N ) fmt . Println ( solve ()) } func solve () string { MAP := make ([] bool , N ) x , y := - 1 , - 1 for _ , e := range A { if ! MAP [ e - 1 ] { MAP [ e - 1 ] = true } else { x = e } } if x == - 1 { return \"Correct\" } for i , e := range MAP { if ! e { y = i + 1 break } } return fmt . Sprintf ( \"%d %d\" , x , y ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u3010PAST#01\u3011D - \u91cd\u8907\u691c\u67fb"},{"location":"AtCoder/PAST/past201912_d/#_1","text":"D - \u91cd\u8907\u691c\u67fb","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_d/#_2","text":"\u6574\u6570\u5217 A A \u3092 1 1 \u304b\u3089 N N \u307e\u3067\u8d70\u67fb\u3057\u3066\u66f8\u304d\u63db\u3048\u304c\u306a\u3051\u308c\u3070 Correct \u66f8\u304d\u63db\u3048\u304c\u3042\u308c\u3070\u66f8\u304d\u63db\u308f\u3063\u305f\u6587\u5b57\u3092\u63a2\u7d22\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N int var A [] int func main () { N = ni () A = nis ( N ) fmt . Println ( solve ()) } func solve () string { MAP := make ([] bool , N ) x , y := - 1 , - 1 for _ , e := range A { if ! MAP [ e - 1 ] { MAP [ e - 1 ] = true } else { x = e } } if x == - 1 { return \"Correct\" } for i , e := range MAP { if ! e { y = i + 1 break } } return fmt . Sprintf ( \"%d %d\" , x , y ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_e/","text":"\u554f\u984c\u6982\u8981 \u00b6 E - SNS \u306e\u30ed\u30b0 \u8003\u3048\u65b9 \u00b6 N\\leq 100 N\\leq 100 , Q\\leq 500 Q\\leq 500 \u306a\u306e\u3067\u611a\u76f4\u306b\u8a08\u7b97\u3057\u3066\u3082\u9593\u306b\u5408\u3044\u305d\u3046\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N , M int var MAT [][] rune func main () { N , M = ni (), ni () MAT = make ([][] rune , N ) for i := range MAT { MAT [ i ] = make ([] rune , N ) for j := range MAT [ i ] { MAT [ i ][ j ] = 'N' } } solve () } func solve () { for i := 0 ; i < M ; i ++ { a := ni () b := ni () - 1 switch a { case 1 : c := ni () - 1 follow ( b , c ) case 2 : followBackAll ( b ) case 3 : followFollow ( b ) } } for i := range MAT { fmt . Println ( string ( MAT [ i ])) } } func follow ( a , b int ) { MAT [ a ][ b ] = 'Y' } func followBackAll ( a int ) { for _ , b := range getFollower ( a ) { follow ( a , b ) } } func followFollow ( a int ) { for _ , e1 := range getFollows ( a ) { for _ , e2 := range getFollows ( e1 ) { if e2 == a { continue } follow ( a , e2 ) } } } // n\u3092\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u4eba\u306eidx\u3092\u8fd4\u3059 func getFollower ( n int ) ( ret [] int ) { for i := 0 ; i < N ; i ++ { if MAT [ i ][ n ] == 'Y' { ret = append ( ret , i ) } } return } // n\u304c\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u4eba\u306eidx\u3092\u8fd4\u3059 func getFollows ( n int ) ( ret [] int ) { for i := 0 ; i < N ; i ++ { if MAT [ n ][ i ] == 'Y' { ret = append ( ret , i ) } } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } submission","title":"\u3010PAST#01\u3011E - SNS \u306e\u30ed\u30b0"},{"location":"AtCoder/PAST/past201912_e/#_1","text":"E - SNS \u306e\u30ed\u30b0","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_e/#_2","text":"N\\leq 100 N\\leq 100 , Q\\leq 500 Q\\leq 500 \u306a\u306e\u3067\u611a\u76f4\u306b\u8a08\u7b97\u3057\u3066\u3082\u9593\u306b\u5408\u3044\u305d\u3046\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N , M int var MAT [][] rune func main () { N , M = ni (), ni () MAT = make ([][] rune , N ) for i := range MAT { MAT [ i ] = make ([] rune , N ) for j := range MAT [ i ] { MAT [ i ][ j ] = 'N' } } solve () } func solve () { for i := 0 ; i < M ; i ++ { a := ni () b := ni () - 1 switch a { case 1 : c := ni () - 1 follow ( b , c ) case 2 : followBackAll ( b ) case 3 : followFollow ( b ) } } for i := range MAT { fmt . Println ( string ( MAT [ i ])) } } func follow ( a , b int ) { MAT [ a ][ b ] = 'Y' } func followBackAll ( a int ) { for _ , b := range getFollower ( a ) { follow ( a , b ) } } func followFollow ( a int ) { for _ , e1 := range getFollows ( a ) { for _ , e2 := range getFollows ( e1 ) { if e2 == a { continue } follow ( a , e2 ) } } } // n\u3092\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u4eba\u306eidx\u3092\u8fd4\u3059 func getFollower ( n int ) ( ret [] int ) { for i := 0 ; i < N ; i ++ { if MAT [ i ][ n ] == 'Y' { ret = append ( ret , i ) } } return } // n\u304c\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u4eba\u306eidx\u3092\u8fd4\u3059 func getFollows ( n int ) ( ret [] int ) { for i := 0 ; i < N ; i ++ { if MAT [ n ][ i ] == 'Y' { ret = append ( ret , i ) } } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_f/","text":"\u554f\u984c\u6982\u8981 \u00b6 F - DoubleCamelCase Sort \u8003\u3048\u65b9 \u00b6 \u6700\u521d\u306e\u6587\u5b57\u3068\u6700\u5f8c\u306e\u6587\u5b57\u306e\u307f\u304c\u82f1\u5927\u6587\u5b57\u306a\u306e\u3067, \u82f1\u5927\u6587\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u7b87\u6240\u3067\u5206\u5272\u3059\u308b\u3002 \u7d42\u4e86\u4f4d\u7f6e\u304c\u62fe\u3048\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u82f1\u5927\u6587\u5b57\u306e\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u3051\u308b\u3002 \u5206\u5272\u3057\u305f\u6587\u5b57\u5217\u3092\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u306f\u7121\u8996\u3057\u3066\u8f9e\u66f8\u9806\u30bd\u30fc\u30c8\u3001\u518d\u7d50\u5408\u3002 Note \u5165\u529b\u4f8b \u00b6 FisHDoGCaTAAAaAAbCAC \u51fa\u529b\u4f8b \u00b6 AAAaAAbCACCaTDoGFisH AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" \"strings\" \"unicode\" ) var r = bufio . NewReader ( os . Stdin ) func main () { S := ns () solve ( S ) } func solve ( s string ) { rs := [] rune ( s + \"A\" ) ss := [] string {} var a int for i := 0 ; i < len ( rs ) - 1 ; i ++ { if unicode . IsUpper ( rs [ i ]) && unicode . IsUpper ( rs [ i + 1 ]) { if i + 1 - a < 2 { continue } ss = append ( ss , string ( rs [ a : i + 1 ])) a = i + 1 } } sort . Slice ( ss , func ( i , j int ) bool { return strings . ToLower ( ss [ i ]) < strings . ToLower ( ss [ j ]) }) fmt . Println ( strings . Join ( ss , \"\" )) } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s } submission","title":"\u3010PAST#01\u3011F - DoubleCamelCase Sort"},{"location":"AtCoder/PAST/past201912_f/#_1","text":"F - DoubleCamelCase Sort","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_f/#_2","text":"\u6700\u521d\u306e\u6587\u5b57\u3068\u6700\u5f8c\u306e\u6587\u5b57\u306e\u307f\u304c\u82f1\u5927\u6587\u5b57\u306a\u306e\u3067, \u82f1\u5927\u6587\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u7b87\u6240\u3067\u5206\u5272\u3059\u308b\u3002 \u7d42\u4e86\u4f4d\u7f6e\u304c\u62fe\u3048\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u82f1\u5927\u6587\u5b57\u306e\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u3051\u308b\u3002 \u5206\u5272\u3057\u305f\u6587\u5b57\u5217\u3092\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u306f\u7121\u8996\u3057\u3066\u8f9e\u66f8\u9806\u30bd\u30fc\u30c8\u3001\u518d\u7d50\u5408\u3002 Note","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_f/#_3","text":"FisHDoGCaTAAAaAAbCAC","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/PAST/past201912_f/#_4","text":"AAAaAAbCACCaTDoGFisH AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" \"strings\" \"unicode\" ) var r = bufio . NewReader ( os . Stdin ) func main () { S := ns () solve ( S ) } func solve ( s string ) { rs := [] rune ( s + \"A\" ) ss := [] string {} var a int for i := 0 ; i < len ( rs ) - 1 ; i ++ { if unicode . IsUpper ( rs [ i ]) && unicode . IsUpper ( rs [ i + 1 ]) { if i + 1 - a < 2 { continue } ss = append ( ss , string ( rs [ a : i + 1 ])) a = i + 1 } } sort . Slice ( ss , func ( i , j int ) bool { return strings . ToLower ( ss [ i ]) < strings . ToLower ( ss [ j ]) }) fmt . Println ( strings . Join ( ss , \"\" )) } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s } submission","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/modules/extgcd/","text":"\u6982\u8981 \u00b6 \u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6700\u5927\u516c\u7d04\u6570\u3068\u30d9\u30ba\u30fc\u4fc2\u6570 1 \u306e\u4e00\u7d44\u3092\u8a08\u7b97\u3059\u308b. a, b a, b \u306e\u6700\u5927\u516c\u7d04\u6570 g g \u3060\u3051\u3067\u306a\u304f\u3001 g=ax\\times by g=ax\\times by \u3092\u6e80\u305f\u3059 x, y x, y \u3092\u8a08\u7b97\u3059\u308b\u306e\u3067\u3001mod\u306e\u9006\u5143\u306e\u5c0e\u51fa\u306b\u7528\u3044\u3089\u308c\u308b\u3002 func extGCD ( a , b int ) ( int , int , int ) { if b == 0 { return a , 1 , 0 } g , x , y := extGCD ( b , a % b ) return g , y , x - a / b * y } g, x, y = extGCD(a, b) g, dx, dy = extGCD(b, a%b) g = a\u30fbx + b\u30fby = dx\u30fbb + dy\u30fb(a%b) = dx\u30fbb + dy\u30fb(a-a/b) = dy\u30fba + dx\u30fbb - (a/b)\u30fbdy = a\u30fbdy + b\u30fb(dx-()\u30fbdy) \u3079\u30ba\u30fc\u306e\u7b49\u5f0f \u21a9","title":"\u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9"},{"location":"AtCoder/modules/extgcd/#_1","text":"\u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6700\u5927\u516c\u7d04\u6570\u3068\u30d9\u30ba\u30fc\u4fc2\u6570 1 \u306e\u4e00\u7d44\u3092\u8a08\u7b97\u3059\u308b. a, b a, b \u306e\u6700\u5927\u516c\u7d04\u6570 g g \u3060\u3051\u3067\u306a\u304f\u3001 g=ax\\times by g=ax\\times by \u3092\u6e80\u305f\u3059 x, y x, y \u3092\u8a08\u7b97\u3059\u308b\u306e\u3067\u3001mod\u306e\u9006\u5143\u306e\u5c0e\u51fa\u306b\u7528\u3044\u3089\u308c\u308b\u3002 func extGCD ( a , b int ) ( int , int , int ) { if b == 0 { return a , 1 , 0 } g , x , y := extGCD ( b , a % b ) return g , y , x - a / b * y } g, x, y = extGCD(a, b) g, dx, dy = extGCD(b, a%b) g = a\u30fbx + b\u30fby = dx\u30fbb + dy\u30fb(a%b) = dx\u30fbb + dy\u30fb(a-a/b) = dy\u30fba + dx\u30fbb - (a/b)\u30fbdy = a\u30fbdy + b\u30fb(dx-()\u30fbdy) \u3079\u30ba\u30fc\u306e\u7b49\u5f0f \u21a9","title":"\u6982\u8981"},{"location":"blog/210101/","text":"\u4eca\u66f4\u306a\u304c\u3089 Python Developers Survey 2019 Results \u3092\u8aad\u3093\u3060\u306e\u3067\u3001\u3056\u3063\u304f\u308a\u3068\u6c17\u306b\u306a\u3063\u305f\u3068\u3053\u308d\u30e1\u30e2\u3068\u3057\u3066\u307e\u3068\u3081\u308b\u3002 Python Developers Survey 2019 Results | JetBrains: Developer Tools for Professionals and Teams Python Developers Survey 2019 \u3068\u306f \u00b6 2019\u5e74\u306e\u79cb\u3054\u308d\u306b Python Software Foundation ( python.org )\u3068 JetBrains \u304c \u5171\u540c\u3067\u5b9f\u65bd\u3057\u305fPython\u958b\u767a\u8005\u8abf\u67fb\u3002 150\u304b\u56fd\u4ee5\u4e0a\u306e24,000\u4eba\u306ePython\u958b\u767a\u8005\u306e\u8abf\u67fb\u3092\u884c\u3044\u3001Python\u958b\u767a\u74b0\u5883\u306e\u30c8\u30ec\u30f3\u30c9\u3092\u7279\u5b9a\u3057\u3001\u6d1e\u5bdf\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3059\u308b\u3002 Python\u30d0\u30fc\u30b8\u30e7\u30f3 \u00b6 Python3 \u306e\u4f7f\u7528\u304c 90% \u3067 Python2 \u306e\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u304c\u7d42\u4e86\u3057\u3066\u3082 10% \u306e\u56de\u7b54\u8005\u304c Python2 \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002 Python3 \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f Python3.7 \u304c 50% \u3092\u8d85\u3048\u3066\u304a\u308a\u3001\u6b21\u3044\u3067 3.6 , 3.8 , 3.5 , 3.9 \u3068\u3064\u3065\u304f\u3002 \u8abf\u67fb\u304c2019\u5e74\u306e\u79cb\u9803\u306a\u306e\u3067 3.5 \u306e\u30ea\u30ea\u30fc\u30b9\u304b\u3089\u307e\u308b4\u5e74\u3067\u3001 3.8 \u306e\u30ea\u30ea\u30fc\u30b9\u304c\u59cb\u307e\u3063\u305f\u3070\u304b\u308a\u306e\u9803\u306a\u306e\u3067\u3001 2020\u5e74\u306e\u4eca\u306f 3.7 , 3.8 \u304c\u4e3b\u6d41\u3068\u306a\u3063\u3066\u3044\u305d\u3046\u3002 Python3.6 \u4ee5\u964d\u306e\u30ea\u30ea\u30fc\u30b9\u65e5 \u00b6 Python3.6 \u304c 2016/12/23 1 Python3.7 \u304c 2018/06/27 2 Python3.8 \u304c 2019/10/14 3 Python3.9 \u304c 2020/10/05 4 \u3061\u306a\u307f\u306b Python3.10 \u306f 2021/10/04 5 \u306e\u30ea\u30ea\u30fc\u30b9\u304c\u4e88\u5b9a\u3055\u308c\u3066\u3044\u308b type hints \u3042\u305f\u308a\u304c\u5927\u304d\u304f\u5909\u308f\u3063\u3066\u3044\u3063\u3066\u3044\u308b\u306e\u3067\u697d\u3057\u307f\u3060\u3002 Python\u74b0\u5883\u306e\u5206\u96e2 \u00b6 [WIP] Python 3.6 was released on December 23, 2016. \u21a9 Python 3.7 was released on June 27, 2018. \u21a9 3.8.0 final: Monday, 2019-10-14 \u21a9 Python 3.9 was released on October 5 th , 2020. \u21a9 3.10.0 final: Monday, 2021-10-04 \u21a9","title":"\u4eca\u66f4\u306a\u304c\u3089 Python Developers Survey 2019 Results \u3092\u307f\u305f\u3002"},{"location":"blog/210101/#python-developers-survey-2019","text":"2019\u5e74\u306e\u79cb\u3054\u308d\u306b Python Software Foundation ( python.org )\u3068 JetBrains \u304c \u5171\u540c\u3067\u5b9f\u65bd\u3057\u305fPython\u958b\u767a\u8005\u8abf\u67fb\u3002 150\u304b\u56fd\u4ee5\u4e0a\u306e24,000\u4eba\u306ePython\u958b\u767a\u8005\u306e\u8abf\u67fb\u3092\u884c\u3044\u3001Python\u958b\u767a\u74b0\u5883\u306e\u30c8\u30ec\u30f3\u30c9\u3092\u7279\u5b9a\u3057\u3001\u6d1e\u5bdf\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3059\u308b\u3002","title":"Python Developers Survey 2019 \u3068\u306f"},{"location":"blog/210101/#python","text":"Python3 \u306e\u4f7f\u7528\u304c 90% \u3067 Python2 \u306e\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u304c\u7d42\u4e86\u3057\u3066\u3082 10% \u306e\u56de\u7b54\u8005\u304c Python2 \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002 Python3 \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f Python3.7 \u304c 50% \u3092\u8d85\u3048\u3066\u304a\u308a\u3001\u6b21\u3044\u3067 3.6 , 3.8 , 3.5 , 3.9 \u3068\u3064\u3065\u304f\u3002 \u8abf\u67fb\u304c2019\u5e74\u306e\u79cb\u9803\u306a\u306e\u3067 3.5 \u306e\u30ea\u30ea\u30fc\u30b9\u304b\u3089\u307e\u308b4\u5e74\u3067\u3001 3.8 \u306e\u30ea\u30ea\u30fc\u30b9\u304c\u59cb\u307e\u3063\u305f\u3070\u304b\u308a\u306e\u9803\u306a\u306e\u3067\u3001 2020\u5e74\u306e\u4eca\u306f 3.7 , 3.8 \u304c\u4e3b\u6d41\u3068\u306a\u3063\u3066\u3044\u305d\u3046\u3002","title":"Python\u30d0\u30fc\u30b8\u30e7\u30f3"},{"location":"blog/210101/#python36","text":"Python3.6 \u304c 2016/12/23 1 Python3.7 \u304c 2018/06/27 2 Python3.8 \u304c 2019/10/14 3 Python3.9 \u304c 2020/10/05 4 \u3061\u306a\u307f\u306b Python3.10 \u306f 2021/10/04 5 \u306e\u30ea\u30ea\u30fc\u30b9\u304c\u4e88\u5b9a\u3055\u308c\u3066\u3044\u308b type hints \u3042\u305f\u308a\u304c\u5927\u304d\u304f\u5909\u308f\u3063\u3066\u3044\u3063\u3066\u3044\u308b\u306e\u3067\u697d\u3057\u307f\u3060\u3002","title":"Python3.6 \u4ee5\u964d\u306e\u30ea\u30ea\u30fc\u30b9\u65e5"},{"location":"blog/210101/#python_1","text":"[WIP] Python 3.6 was released on December 23, 2016. \u21a9 Python 3.7 was released on June 27, 2018. \u21a9 3.8.0 final: Monday, 2019-10-14 \u21a9 Python 3.9 was released on October 5 th , 2020. \u21a9 3.10.0 final: Monday, 2021-10-04 \u21a9","title":"Python\u74b0\u5883\u306e\u5206\u96e2"},{"location":"blog/210101_01/","text":"\u73fe\u884cSELL\u306e\u78ba\u8a8d \u00b6 $ echo $SHELL /bin/bash zsh \u304c\u5165\u3063\u3066\u3044\u308b\u304b\u306e\u78ba\u8a8d\u3068\u3001\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8 \u00b6 $ cat /etc/shells /bin/bash /bin/zsh $ chsh -s /bin/zsh \u30b7\u30a7\u30eb\u518d\u8d77\u52d5 \u00b6 $ exec $SHELL -l \u30e1\u30e2 \u00b6 alias \u3068\u304b\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\u3082\u306e\u3082\u3042\u308b\u306e\u3067\u3001\u6bb5\u968e\u7684\u306b\u79fb\u884c\u3059\u308b\u3002 pipenv \u306a\u3069\u4e00\u90e8\u79fb\u884c\u304c\u5fc5\u8981\u306a\u3082\u306e\u3042\u308a \u53c2\u8003 \u00b6 \u3068\u308a\u3042\u3048\u305aZsh\u3092\u4f7f\u3048\u3070\u826f\u3044\u3093\u3060\u308d\u3046\uff1f - Qiita [Mac]\u30c7\u30d5\u30a9\u30eb\u30c8\u30b7\u30a7\u30eb\u3092zsh\u306b\u8a2d\u5b9a\u3059\u308b\u307e\u3067 - Qiita \u304a\u524d\u3089\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u306f\u30c0\u30b5\u3044 - Qiita sorin-ionescu/prezto: The configuration framework for Zsh sindresorhus/pure: Pretty, minimal and fast ZSH prompt zsh\u306e\u5916\u90e8\u30d7\u30e9\u30b0\u30a4\u30f3\u307e\u3068\u3081 - Qiita","title":"bash \u304b\u3089 zsh \u306b\u5909\u3048\u305f"},{"location":"blog/210101_01/#sell","text":"$ echo $SHELL /bin/bash","title":"\u73fe\u884cSELL\u306e\u78ba\u8a8d"},{"location":"blog/210101_01/#zsh","text":"$ cat /etc/shells /bin/bash /bin/zsh $ chsh -s /bin/zsh","title":"zsh \u304c\u5165\u3063\u3066\u3044\u308b\u304b\u306e\u78ba\u8a8d\u3068\u3001\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8"},{"location":"blog/210101_01/#_1","text":"$ exec $SHELL -l","title":"\u30b7\u30a7\u30eb\u518d\u8d77\u52d5"},{"location":"blog/210101_01/#_2","text":"alias \u3068\u304b\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\u3082\u306e\u3082\u3042\u308b\u306e\u3067\u3001\u6bb5\u968e\u7684\u306b\u79fb\u884c\u3059\u308b\u3002 pipenv \u306a\u3069\u4e00\u90e8\u79fb\u884c\u304c\u5fc5\u8981\u306a\u3082\u306e\u3042\u308a","title":"\u30e1\u30e2"},{"location":"blog/210101_01/#_3","text":"\u3068\u308a\u3042\u3048\u305aZsh\u3092\u4f7f\u3048\u3070\u826f\u3044\u3093\u3060\u308d\u3046\uff1f - Qiita [Mac]\u30c7\u30d5\u30a9\u30eb\u30c8\u30b7\u30a7\u30eb\u3092zsh\u306b\u8a2d\u5b9a\u3059\u308b\u307e\u3067 - Qiita \u304a\u524d\u3089\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u306f\u30c0\u30b5\u3044 - Qiita sorin-ionescu/prezto: The configuration framework for Zsh sindresorhus/pure: Pretty, minimal and fast ZSH prompt zsh\u306e\u5916\u90e8\u30d7\u30e9\u30b0\u30a4\u30f3\u307e\u3068\u3081 - Qiita","title":"\u53c2\u8003"},{"location":"blog/210103_01/","text":"\u30df\u30a6\u30e9\u6298\u308a \u30ab\u30c6\u30ca\u30ea\u30fc\u66f2\u7dda \u30a2\u30eb\u30d5\u30a1\u7c73","title":"wikipedia"},{"location":"jack_in_the_box/atcoder_cat/","text":"\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u554f\u984c \u00b6 ABC188:C - ABC Tournament \u533a\u9593\u52a0\u7b97\u554f\u984c \u00b6 ABC188:D - Snuke Prime mod\u5f0f\u5909\u5f62 \u00b6 ARC111:A - Simple Math 2","title":"AtCoder \u554f\u984c\u30ab\u30c6\u30b4\u30e9\u30a4\u30ba\u500b\u4eba\u7684\u30e1\u30e2"},{"location":"jack_in_the_box/atcoder_cat/#_1","text":"ABC188:C - ABC Tournament","title":"\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u554f\u984c"},{"location":"jack_in_the_box/atcoder_cat/#_2","text":"ABC188:D - Snuke Prime","title":"\u533a\u9593\u52a0\u7b97\u554f\u984c"},{"location":"jack_in_the_box/atcoder_cat/#mod","text":"ARC111:A - Simple Math 2","title":"mod\u5f0f\u5909\u5f62"},{"location":"jack_in_the_box/ffmpeg_util/","text":"\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u8a73\u7d30 \u00b6 $ sox --i audio.mp3 Input File : 'audio.mp3' Channels : 2 Sample Rate : 22050 Precision : 16 -bit Duration : 00 :02:30.31 = 3314291 samples ~ 11273 .1 CDDA sectors File Size : 1 .20M Bit Rate : 64 .0k Sample Encoding: MPEG audio ( layer I, II or III ) \u518d\u751f\u901f\u5ea6\u3092\u5909\u3048\u308b \u00b6 2\u500d\u901f \u00b6 $ ffmpeg -i src.mp4 -vf setpts = PTS/2.0 -af atempo = 2 .0 dest.mp4 ffmpeg\u3092\u4f7f\u3063\u3066\u52d5\u753b\u306e\u518d\u751f\u901f\u5ea6\u3092\u5909\u3048\u3066\u307f\u308b - \u8133\u5185\u30e1\u30e2\uff0b\uff0b \u6307\u5b9a\u6642\u9593\u3067\u30ab\u30c3\u30c8 \u00b6 $ ffmpeg -i input.mp4 -t [duration] -c copy output.mp4 ffmpeg \u3067\u6307\u5b9a\u6642\u9593\u3067\u30ab\u30c3\u30c8\u3059\u308b\u307e\u3068\u3081 | \u30cb\u30b3\u30e9\u30dc \u7d50\u5408 \u00b6 How to merge audio and video file in ffmpeg - Super User ffmpeg join two mp4 files with ffmpeg on command line - Super User Merge video and audio with ffmpeg. Loop the video while audio is not over - Stack Overflow \u30ce\u30a4\u30ba\u30ad\u30e3\u30f3\u30bb\u30eb \u00b6 $ ffmpeg -i <input_file> -af \"highpass=f=200, lowpass=f=3000\" <output_file> \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30ce\u30a4\u30ba\u3092\u6e1b\u3089\u3057\u3001ffmpeg\u3092\u4f7f\u7528\u3057\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30af\u30ea\u30c3\u30d7\u304b\u3089\u306e\u97f3\u58f0\u3092\u6700\u9069\u5316\u3059\u308b","title":"ffmpeg \u500b\u4eba\u7684\u30e1\u30e2"},{"location":"jack_in_the_box/ffmpeg_util/#_1","text":"$ sox --i audio.mp3 Input File : 'audio.mp3' Channels : 2 Sample Rate : 22050 Precision : 16 -bit Duration : 00 :02:30.31 = 3314291 samples ~ 11273 .1 CDDA sectors File Size : 1 .20M Bit Rate : 64 .0k Sample Encoding: MPEG audio ( layer I, II or III )","title":"\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u8a73\u7d30"},{"location":"jack_in_the_box/ffmpeg_util/#_2","text":"","title":"\u518d\u751f\u901f\u5ea6\u3092\u5909\u3048\u308b"},{"location":"jack_in_the_box/ffmpeg_util/#2","text":"$ ffmpeg -i src.mp4 -vf setpts = PTS/2.0 -af atempo = 2 .0 dest.mp4 ffmpeg\u3092\u4f7f\u3063\u3066\u52d5\u753b\u306e\u518d\u751f\u901f\u5ea6\u3092\u5909\u3048\u3066\u307f\u308b - \u8133\u5185\u30e1\u30e2\uff0b\uff0b","title":"2\u500d\u901f"},{"location":"jack_in_the_box/ffmpeg_util/#_3","text":"$ ffmpeg -i input.mp4 -t [duration] -c copy output.mp4 ffmpeg \u3067\u6307\u5b9a\u6642\u9593\u3067\u30ab\u30c3\u30c8\u3059\u308b\u307e\u3068\u3081 | \u30cb\u30b3\u30e9\u30dc","title":"\u6307\u5b9a\u6642\u9593\u3067\u30ab\u30c3\u30c8"},{"location":"jack_in_the_box/ffmpeg_util/#_4","text":"How to merge audio and video file in ffmpeg - Super User ffmpeg join two mp4 files with ffmpeg on command line - Super User Merge video and audio with ffmpeg. Loop the video while audio is not over - Stack Overflow","title":"\u7d50\u5408"},{"location":"jack_in_the_box/ffmpeg_util/#_5","text":"$ ffmpeg -i <input_file> -af \"highpass=f=200, lowpass=f=3000\" <output_file> \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30ce\u30a4\u30ba\u3092\u6e1b\u3089\u3057\u3001ffmpeg\u3092\u4f7f\u7528\u3057\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30af\u30ea\u30c3\u30d7\u304b\u3089\u306e\u97f3\u58f0\u3092\u6700\u9069\u5316\u3059\u308b","title":"\u30ce\u30a4\u30ba\u30ad\u30e3\u30f3\u30bb\u30eb"},{"location":"jack_in_the_box/python_tips/","text":"Python 3.8.0 (v3.8.0:fa919fdf25, Oct 14 2019, 10:23:27) [Clang 6.0 (clang-600.0.57)] on darwin Tips 1 \u00b6 >>> [ 1 , 2 ][ False ] 1 >>> [ 1 , 2 ][ True ] 2 \u306a\u305c\u3053\u3046\u306a\u308b? \u00b6 >>> True == 1 True >>> False == 0 True Note \u6574\u6570\u306b\u306f \u6574\u6570(int) \u3068 \u30d6\u30fc\u30eb\u5024(bool) \u306e\u4e8c\u3064\u306e\u30bf\u30a4\u30d7\u304c\u3042\u308a\u307e\u3059\u3002 3. Data model \u2014 Python 3.9.1 documentation >>> int . __base__ < class ' object '> >>> int . __subclasses__ () [ < class ' bool '>] \u77ed\u7d61\u8a55\u4fa1 >>> print ( \"1st\" ) or print ( \"2nd\" ) 1 st 2 nd >>> print ( \"3rd\" ) and print ( \"4th\" ) 3 rd","title":"\u3042\u307e\u308a\u77e5\u3089\u306a\u304b\u3063\u305f Python \u306e\u66f8\u304d\u65b9"},{"location":"jack_in_the_box/python_tips/#tips-1","text":">>> [ 1 , 2 ][ False ] 1 >>> [ 1 , 2 ][ True ] 2","title":"Tips 1"},{"location":"jack_in_the_box/python_tips/#_1","text":">>> True == 1 True >>> False == 0 True Note \u6574\u6570\u306b\u306f \u6574\u6570(int) \u3068 \u30d6\u30fc\u30eb\u5024(bool) \u306e\u4e8c\u3064\u306e\u30bf\u30a4\u30d7\u304c\u3042\u308a\u307e\u3059\u3002 3. Data model \u2014 Python 3.9.1 documentation >>> int . __base__ < class ' object '> >>> int . __subclasses__ () [ < class ' bool '>] \u77ed\u7d61\u8a55\u4fa1 >>> print ( \"1st\" ) or print ( \"2nd\" ) 1 st 2 nd >>> print ( \"3rd\" ) and print ( \"4th\" ) 3 rd","title":"\u306a\u305c\u3053\u3046\u306a\u308b?"},{"location":"jack_in_the_box/algorithms/binary_powering/","text":"\u6982\u8981 \u00b6 a^n a^n \u3092 O(n) O(n) \u306b\u5909\u308f\u308a O(log\\, n) O(log\\, n) \u3067\u8a08\u7b97\u3059\u308b\u3002 \u30a2\u30a4\u30c7\u30a2 \u00b6 n n \u3092\u4e8c\u9032\u6570\u3067\u8003\u3048\u3001\u4e57\u7b97\u3092\u5206\u5272\u3001\u6700\u9069\u5316\u3059\u308b\u3002 \u4f8b \u00b6 3^{13} = 3^{1101_2} = 3^8\\cdot3^4\\cdot3^1 3^{13} = 3^{1101_2} = 3^8\\cdot3^4\\cdot3^1 \u30a2\u30d7\u30ed\u30fc\u30c1 \u00b6 n\\geq0 n\\geq0 \u306b\u304a\u3044\u3066 a^n = \\begin{cases} 1 & (n=0) \\\\ (a^{\\frac{n}{2}})^2 & (n\\ even)\\\\ (a^{\\frac{n-1}{2}})^2\\cdot a & (n\\ odd)\\\\ \\end{cases} a^n = \\begin{cases} 1 & (n=0) \\\\ (a^{\\frac{n}{2}})^2 & (n\\ even)\\\\ (a^{\\frac{n-1}{2}})^2\\cdot a & (n\\ odd)\\\\ \\end{cases} \u5b9f\u88c5 \u00b6 func binpow ( a , b , m int ) int { a %= m res := 1 for b > 0 { if b & 1 != 0 { res = res * a % m } a = a * a % m b >>= 1 } return res } \u53c2\u8003 \u00b6 https://cp-algorithms.com/algebra/binary-exp.html","title":"The binary powering algorithm"},{"location":"jack_in_the_box/algorithms/binary_powering/#_1","text":"a^n a^n \u3092 O(n) O(n) \u306b\u5909\u308f\u308a O(log\\, n) O(log\\, n) \u3067\u8a08\u7b97\u3059\u308b\u3002","title":"\u6982\u8981"},{"location":"jack_in_the_box/algorithms/binary_powering/#_2","text":"n n \u3092\u4e8c\u9032\u6570\u3067\u8003\u3048\u3001\u4e57\u7b97\u3092\u5206\u5272\u3001\u6700\u9069\u5316\u3059\u308b\u3002","title":"\u30a2\u30a4\u30c7\u30a2"},{"location":"jack_in_the_box/algorithms/binary_powering/#_3","text":"3^{13} = 3^{1101_2} = 3^8\\cdot3^4\\cdot3^1 3^{13} = 3^{1101_2} = 3^8\\cdot3^4\\cdot3^1","title":"\u4f8b"},{"location":"jack_in_the_box/algorithms/binary_powering/#_4","text":"n\\geq0 n\\geq0 \u306b\u304a\u3044\u3066 a^n = \\begin{cases} 1 & (n=0) \\\\ (a^{\\frac{n}{2}})^2 & (n\\ even)\\\\ (a^{\\frac{n-1}{2}})^2\\cdot a & (n\\ odd)\\\\ \\end{cases} a^n = \\begin{cases} 1 & (n=0) \\\\ (a^{\\frac{n}{2}})^2 & (n\\ even)\\\\ (a^{\\frac{n-1}{2}})^2\\cdot a & (n\\ odd)\\\\ \\end{cases}","title":"\u30a2\u30d7\u30ed\u30fc\u30c1"},{"location":"jack_in_the_box/algorithms/binary_powering/#_5","text":"func binpow ( a , b , m int ) int { a %= m res := 1 for b > 0 { if b & 1 != 0 { res = res * a % m } a = a * a % m b >>= 1 } return res }","title":"\u5b9f\u88c5"},{"location":"jack_in_the_box/algorithms/binary_powering/#_6","text":"https://cp-algorithms.com/algebra/binary-exp.html","title":"\u53c2\u8003"},{"location":"jack_in_the_box/algorithms/fenwick_tree/","text":"tl;dr \u00b6 Go\u8a00\u8a9e\u3067 Fenwick tree (binary indexed tree, BIT) \u3092\u5b9f\u88c5\u3057\u305f\u3002 \u30e1\u30ea\u30c3\u30c8 \u00b6 \u7701\u30e1\u30e2\u30ea (\u8981\u7d20\u6570 N \u306b\u5bfe\u3057\u3066\u30b5\u30a4\u30ba N \u3067\u5b9f\u88c5\u53ef\u80fd) \u548c\u306e\u8a08\u7b97, \u5024\u306e\u66f4\u65b0\u304c O(log\\, n) O(log\\, n) \u30b3\u30fc\u30c9 \u00b6 package main import ( \"fmt\" ) type FenwickTree [] int func newFenwickTree ( n int ) * FenwickTree { fw := make ( FenwickTree , n + 1 ) return & fw } func ( fw FenwickTree ) add ( i , x int ) { for i < len ( fw ) { fw [ i ] += x i += i & - i } } func ( fw FenwickTree ) add0 ( i , x int ) { fw . add ( i + 1 , x ) } // [0, i] \u306e\u7d2f\u7a4d\u548c func ( fw FenwickTree ) _sum ( i int ) int { s := 0 for i > 0 { s += fw [ i ] i -= i & - i } return s } // 0-indexed func ( fw FenwickTree ) _sum0 ( i int ) int { return fw . _sum ( i + 1 ) } // [i, j] \u306e\u7d2f\u7a4d\u548c func ( fw FenwickTree ) sum ( i , j int ) int { return fw . _sum ( j ) - fw . _sum ( i - 1 ) } // 0-indexed func ( fw FenwickTree ) sum0 ( i , j int ) int { return fw . _sum0 ( j ) - fw . _sum0 ( i - 1 ) } // \u3088\u304f\u4f7f\u3046\u5f62\u306b\u5909\u63db (\u30c7\u30d0\u30c3\u30af\u7528) func ( fw FenwickTree ) flatten () [] int { ret := make ([] int , len ( fw )) for i := range ret { ret [ i ] = fw . sum ( i , i ) } return ret } func main () { n := 3 fw := newFenwickTree ( n ) fw . add ( 1 , 1 ) fw . add ( 2 , 2 ) fw . add ( 3 , 3 ) fmt . Println ( fw . sum ( 1 , 2 )) // 3 fmt . Println ( fw ) // [0 1 3 3] fmt . Println ( fw . flatten ()) // [0 1 2 3] } Note \u6700\u4e0b\u4f4d\u30d3\u30c3\u30c8(LSB) - Wikipedia \u4e8c\u9032\u6570\u3067\u8868\u3057\u305f\u6642\u3001\u521d\u3081\u30661\u304c\u51fa\u73fe\u3059\u308b\u4f4d\u7f6e i = 3 \u306e\u6642 \u4e8c\u9032\u6570\u8868\u8a18\u3067 0b0001 \u306a\u306e\u3067 LSB = 1 i = 6 \u306e\u6642 \u4e8c\u9032\u6570\u8868\u8a18\u3067 0b0110 \u306a\u306e\u3067 LSB = 2 LSB \u306f i & -i \u3067\u53d6\u5f97\u3067\u304d\u308b LSB = 3 & -3 = 1 , LSB = 6 & -6 = 2 `` \u8ee2\u5012\u6570 \u00b6 \u6570\u5217 A = [a_0, a_i,...,a_{N-1}] A = [a_0, a_i,...,a_{N-1}] \u306b\u304a\u3051\u308b i < j i < j \u304b\u3064 a_i>a_j a_i>a_j \u3092\u6e80\u305f\u3059\u6dfb\u5b57\u306e\u7d44 (i, j) (i, j) \u306e\u500b\u6570 j j \u3092\u56fa\u5b9a\u3057\u3066\u8003\u3048\u308b j j \u306e\u5de6\u5074\u306b\u3042\u308b\u3001 a_j a_j \u3088\u308a\u5927\u304d\u306a\u6570 a_i a_i \u306e\u500b\u6570\u306e\u7dcf\u548c\u304c\u6c42\u3081\u308b\u6570 func main () { N := nextInt () A := nextInts ( N ) fw := newFenwickTree ( N ) var ans int for _ , a := range A { ans += fw . sum0 ( a , N - 1 ) fw . add0 ( a , 1 ) } fmt . Println ( ans ) } Input: 10 0 3 1 5 4 2 9 6 8 7 Output: 9 https://qiita.com/wisteria0410ss/items/296e0daa9e967ca71ed6 \u53c2\u8003 \u00b6 https://atcoder.github.io/ac-library/document_ja/fenwicktree.html https://www.slideshare.net/hcpc_hokudai/binary-indexed-tree","title":"Fenwick Tree"},{"location":"jack_in_the_box/algorithms/fenwick_tree/#tldr","text":"Go\u8a00\u8a9e\u3067 Fenwick tree (binary indexed tree, BIT) \u3092\u5b9f\u88c5\u3057\u305f\u3002","title":"tl;dr"},{"location":"jack_in_the_box/algorithms/fenwick_tree/#_1","text":"\u7701\u30e1\u30e2\u30ea (\u8981\u7d20\u6570 N \u306b\u5bfe\u3057\u3066\u30b5\u30a4\u30ba N \u3067\u5b9f\u88c5\u53ef\u80fd) \u548c\u306e\u8a08\u7b97, \u5024\u306e\u66f4\u65b0\u304c O(log\\, n) O(log\\, n)","title":"\u30e1\u30ea\u30c3\u30c8"},{"location":"jack_in_the_box/algorithms/fenwick_tree/#_2","text":"package main import ( \"fmt\" ) type FenwickTree [] int func newFenwickTree ( n int ) * FenwickTree { fw := make ( FenwickTree , n + 1 ) return & fw } func ( fw FenwickTree ) add ( i , x int ) { for i < len ( fw ) { fw [ i ] += x i += i & - i } } func ( fw FenwickTree ) add0 ( i , x int ) { fw . add ( i + 1 , x ) } // [0, i] \u306e\u7d2f\u7a4d\u548c func ( fw FenwickTree ) _sum ( i int ) int { s := 0 for i > 0 { s += fw [ i ] i -= i & - i } return s } // 0-indexed func ( fw FenwickTree ) _sum0 ( i int ) int { return fw . _sum ( i + 1 ) } // [i, j] \u306e\u7d2f\u7a4d\u548c func ( fw FenwickTree ) sum ( i , j int ) int { return fw . _sum ( j ) - fw . _sum ( i - 1 ) } // 0-indexed func ( fw FenwickTree ) sum0 ( i , j int ) int { return fw . _sum0 ( j ) - fw . _sum0 ( i - 1 ) } // \u3088\u304f\u4f7f\u3046\u5f62\u306b\u5909\u63db (\u30c7\u30d0\u30c3\u30af\u7528) func ( fw FenwickTree ) flatten () [] int { ret := make ([] int , len ( fw )) for i := range ret { ret [ i ] = fw . sum ( i , i ) } return ret } func main () { n := 3 fw := newFenwickTree ( n ) fw . add ( 1 , 1 ) fw . add ( 2 , 2 ) fw . add ( 3 , 3 ) fmt . Println ( fw . sum ( 1 , 2 )) // 3 fmt . Println ( fw ) // [0 1 3 3] fmt . Println ( fw . flatten ()) // [0 1 2 3] } Note \u6700\u4e0b\u4f4d\u30d3\u30c3\u30c8(LSB) - Wikipedia \u4e8c\u9032\u6570\u3067\u8868\u3057\u305f\u6642\u3001\u521d\u3081\u30661\u304c\u51fa\u73fe\u3059\u308b\u4f4d\u7f6e i = 3 \u306e\u6642 \u4e8c\u9032\u6570\u8868\u8a18\u3067 0b0001 \u306a\u306e\u3067 LSB = 1 i = 6 \u306e\u6642 \u4e8c\u9032\u6570\u8868\u8a18\u3067 0b0110 \u306a\u306e\u3067 LSB = 2 LSB \u306f i & -i \u3067\u53d6\u5f97\u3067\u304d\u308b LSB = 3 & -3 = 1 , LSB = 6 & -6 = 2 ``","title":"\u30b3\u30fc\u30c9"},{"location":"jack_in_the_box/algorithms/fenwick_tree/#_3","text":"\u6570\u5217 A = [a_0, a_i,...,a_{N-1}] A = [a_0, a_i,...,a_{N-1}] \u306b\u304a\u3051\u308b i < j i < j \u304b\u3064 a_i>a_j a_i>a_j \u3092\u6e80\u305f\u3059\u6dfb\u5b57\u306e\u7d44 (i, j) (i, j) \u306e\u500b\u6570 j j \u3092\u56fa\u5b9a\u3057\u3066\u8003\u3048\u308b j j \u306e\u5de6\u5074\u306b\u3042\u308b\u3001 a_j a_j \u3088\u308a\u5927\u304d\u306a\u6570 a_i a_i \u306e\u500b\u6570\u306e\u7dcf\u548c\u304c\u6c42\u3081\u308b\u6570 func main () { N := nextInt () A := nextInts ( N ) fw := newFenwickTree ( N ) var ans int for _ , a := range A { ans += fw . sum0 ( a , N - 1 ) fw . add0 ( a , 1 ) } fmt . Println ( ans ) } Input: 10 0 3 1 5 4 2 9 6 8 7 Output: 9 https://qiita.com/wisteria0410ss/items/296e0daa9e967ca71ed6","title":"\u8ee2\u5012\u6570"},{"location":"jack_in_the_box/algorithms/fenwick_tree/#_4","text":"https://atcoder.github.io/ac-library/document_ja/fenwicktree.html https://www.slideshare.net/hcpc_hokudai/binary-indexed-tree","title":"\u53c2\u8003"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/","text":"tl;dr \u00b6 Go\u8a00\u8a9e\u3067 \u96a3\u63a5\u884c\u5217\u3092\u7528\u3044\u305f\u6700\u77ed\u7d4c\u8def\u5c0e\u51fa\u554f\u984c\u306e\u69d8\u3005\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u305f\u3002 \u5e45\u512a\u5148\u63a2\u7d22, \u30d9\u30eb\u30de\u30f3\u2013\u30d5\u30a9\u30fc\u30c9\u6cd5, \u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5, \u30d7\u30ea\u30e0\u6cd5 \u5171\u901a\u90e8 \u00b6 \u9802\u70b9\u6570 V V \u306e\u6642\u3001 V = len(Adjlist) type pair struct { to , cost int } type Adjlist [][] pair PriorityQueue \u00b6 https://golang.org/pkg/container/heap/ type PQ [] pair func ( pq PQ ) Len () int { return len ( pq ) } func ( pq PQ ) Less ( i , j int ) bool { return pq [ i ]. cost < pq [ j ]. cost } func ( pq PQ ) Swap ( i , j int ) { pq [ i ], pq [ j ] = pq [ j ], pq [ i ] } func ( pq * PQ ) Push ( x interface {}) { * pq = append ( * pq , x .( pair )) } func ( pq * PQ ) Pop () interface {} { old := * pq n := len ( old ) x := old [ n - 1 ] * pq = old [ 0 : n - 1 ] return x } \u5e45\u512a\u5148\u63a2\u7d22 \u00b6 \u6700\u3082\u57fa\u672c\u3068\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 result \u306e\u66f4\u65b0\u306f1\u5ea6\u3057\u304b\u884c\u308f\u308c\u306a\u3044\u306e\u3067\u3001 O(V) O(V) // s\u3000\u304b\u3089\u5404\u30ce\u30fc\u30c9\u3078\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8fd4\u3059 O(V) func ( al Adjlist ) bfs ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 for q := [] int { s }; len ( q ) > 0 ; { var p int p , q = q [ 0 ], q [ 1 :] for _ , np := range al [ p ] { if result [ np . to ] != INF { continue } result [ np . to ] = result [ p ] + 1 q = append ( q , np . to ) } } return result } \u30d9\u30eb\u30de\u30f3\u2013\u30d5\u30a9\u30fc\u30c9\u6cd5 \u00b6 \u5168\u3066\u306e\u9802\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u96a3\u3092\u898b\u3066\u3001\u3088\u308a\u5c0f\u3055\u3044\u5024\u3067\u9077\u79fb\u53ef\u80fd\u3067\u3042\u308c\u3070\u3001\u5024\u3092\u66f4\u65b0\u3059\u308b \u3053\u308c\u3092\u5168\u3066\u306e\u9802\u70b9\u306b\u304a\u3044\u3066\u66f4\u65b0\u304c\u8d77\u304d\u306a\u304f\u306a\u308b\u307e\u3067\u884c\u3046 \u4e00\u5468\u6bce\u306b\u5c11\u306a\u304f\u3068\u3082\u4e00\u3064\u306e\u3055\u6700\u5c0f\u30b3\u30b9\u30c8\u304c\u6c7a\u5b9a\u3059\u308b\u306e\u3067\u3001\u30eb\u30fc\u30d7\u56de\u6570\u306f\u6700\u5927 V \u3088\u3063\u3066\u8a08\u7b97\u91cf\u306f O(VE) O(VE) // s: \u958b\u59cb\u30ce\u30fc\u30c9\u3000(\u8ca0\u306e\u30b3\u30b9\u30c8\u304c\u542b\u307e\u308c\u308b\u5834\u5408) func ( al Adjlist ) bellman ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 for update := true ; update ; { update = false for i := range al { for _ , p := range al [ i ] { if result [ p . to ] > result [ i ] + p . cost { result [ p . to ] = result [ i ] + p . cost update = true } } } } return result } \u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5 \u00b6 \u6700\u5c0f\u30b3\u30b9\u30c8\u30921\u30ce\u30fc\u30c9\u305a\u3064\u78ba\u5b9a\u3055\u305b\u3066\u3044\u304f \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc\u3092\u7528\u3044\u308b\u306e\u3067\u3001\u30ad\u30e5\u30fc\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f\u9802\u70b9\u306e\u5024\u304c\u66f8\u304d\u63db\u308f\u308b\u306e\u306f\u6700\u521d\u306e1\u5ea6\u306e\u307f \u5168\u3066\u306e\u8fba\u3092\u56de\u308b\u306e\u306b O(E) O(E) , \u30ad\u30e5\u30fc\u306e\u633f\u5165,\u524a\u9664\u3067 O(log\\, E) O(log\\, E) \u3088\u3063\u3066\u8a08\u7b97\u91cf\u306f O(E\\, log\\, E) O(E\\, log\\, E) // s: \u958b\u59cb\u30ce\u30fc\u30c9 (\u30b3\u30b9\u30c8\u304c\u5168\u3066\u6b63\u306e\u5834\u5408) func ( al Adjlist ) dijk ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 pq := new ( PQ ) heap . Init ( pq ) heap . Push ( pq , pair { s , 0 }) for pq . Len () > 0 { p := heap . Pop ( pq ).( pair ) if result [ p . to ] < p . cost { continue } for _ , np := range al [ p . to ] { nc := p . cost + np . cost if result [ np . to ] > nc { result [ np . to ] = nc heap . Push ( pq , pair { np . to , nc }) } } } return result } \u30d7\u30ea\u30e0\u6cd5 \u00b6 \u6700\u5c0f\u6728\u3092\u9589\u8def\u3092\u4f5c\u3089\u306a\u3044\u6700\u5c0f\u30b3\u30b9\u30c8\u3067\u62e1\u5f35\u3057\u3066\u3044\u304f // \u9802\u70b9 s \u3092\u542b\u3080\u6700\u5c0f\u5168\u57df\u6728\u306e\u30b3\u30b9\u30c8\u3092\u8fd4\u3059 func ( al Adjlist ) prim ( s int ) int { v := len ( al ) result := make ([] int , v ) fill ( result , INF ) pq := new ( PQ ) heap . Init ( pq ) var length , size int result [ s ] = 0 heap . Push ( pq , pair { s , 0 }) for pq . Len () > 0 && size < v { p := heap . Pop ( pq ).( pair ) if result [ p . to ] < p . cost { continue } result [ p . to ] = - INF // used length += p . cost size ++ for _ , np := range al [ p . to ] { if result [ np . to ] > np . cost { result [ np . to ] = np . cost heap . Push ( pq , pair { np . to , np . cost }) } } } return length } \u30b3\u30fc\u30c9 \u00b6 package main import ( \"bufio\" \"bytes\" \"container/heap\" \"fmt\" \"strconv\" ) const ( initialBufSize = 1e4 INF = 1 << 60 ) var input = [] byte ( `10 12 4 9 90 3 4 210 3 1 90 1 0 210 4 5 120 5 3 30 5 6 90 6 1 120 7 6 120 7 8 150 2 1 210 2 7 180` ) var r = bytes . NewReader ( input ) var sc = bufio . NewScanner ( r ) type pair struct { to , cost int } type Adjlist [][] pair type PQ [] pair func ( pq PQ ) Len () int { return len ( pq ) } func ( pq PQ ) Less ( i , j int ) bool { return pq [ i ]. cost < pq [ j ]. cost } func ( pq PQ ) Swap ( i , j int ) { pq [ i ], pq [ j ] = pq [ j ], pq [ i ] } func ( pq * PQ ) Push ( x interface {}) { * pq = append ( * pq , x .( pair )) } func ( pq * PQ ) Pop () interface {} { old := * pq n := len ( old ) x := old [ n - 1 ] * pq = old [ 0 : n - 1 ] return x } // s\u3000\u304b\u3089\u5404\u30ce\u30fc\u30c9\u3078\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8fd4\u3059 O(V) func ( al Adjlist ) bfs ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 for q := [] int { s }; len ( q ) > 0 ; { var p int p , q = q [ 0 ], q [ 1 :] for _ , np := range al [ p ] { if result [ np . to ] != INF { continue } result [ np . to ] = result [ p ] + 1 q = append ( q , np . to ) } } return result } // s: \u958b\u59cb\u30ce\u30fc\u30c9 (\u30b3\u30b9\u30c8\u304c\u5168\u3066\u6b63\u306e\u5834\u5408) func ( al Adjlist ) dijk ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 pq := new ( PQ ) heap . Init ( pq ) heap . Push ( pq , pair { s , 0 }) for pq . Len () > 0 { p := heap . Pop ( pq ).( pair ) if result [ p . to ] < p . cost { continue } for _ , np := range al [ p . to ] { nc := p . cost + np . cost if result [ np . to ] > nc { result [ np . to ] = nc heap . Push ( pq , pair { np . to , nc }) } } } return result } // s: \u958b\u59cb\u30ce\u30fc\u30c9\u3000(\u8ca0\u306e\u30b3\u30b9\u30c8\u304c\u542b\u307e\u308c\u308b\u5834\u5408) func ( al Adjlist ) bellman ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 for update := true ; update ; { update = false for i := range al { for _ , p := range al [ i ] { if result [ p . to ] > result [ i ] + p . cost { result [ p . to ] = result [ i ] + p . cost update = true } } } } return result } // \u9802\u70b9 s \u3092\u542b\u3080\u6700\u5c0f\u5168\u57df\u6728\u306e\u30b3\u30b9\u30c8\u3092\u8fd4\u3059 func ( al Adjlist ) prim ( s int ) int { v := len ( al ) result := make ([] int , v ) fill ( result , INF ) pq := new ( PQ ) heap . Init ( pq ) var length , size int result [ s ] = 0 heap . Push ( pq , pair { s , 0 }) for pq . Len () > 0 && size < v { p := heap . Pop ( pq ).( pair ) if result [ p . to ] < p . cost { continue } result [ p . to ] = - INF // used length += p . cost size ++ for _ , np := range al [ p . to ] { if result [ np . to ] > np . cost { result [ np . to ] = np . cost heap . Push ( pq , pair { np . to , np . cost }) } } } return length } func main () { V , E := nextInt (), nextInt () adjlist := make ( Adjlist , V ) for i := 0 ; i < E ; i ++ { a , b , c := nextInt (), nextInt (), nextInt () adjlist [ a ] = append ( adjlist [ a ], pair { b , c }) adjlist [ b ] = append ( adjlist [ b ], pair { a , c }) } fmt . Println ( adjlist . bellman ( 4 )) // [450 240 450 150 0 120 210 330 480 90] fmt . Println ( adjlist . dijk ( 4 )) // [450 240 450 150 0 120 210 330 480 90] fmt . Println ( adjlist . prim ( 4 )) // 1080 fmt . Println ( adjlist . bfs ( 4 )) // [3 2 3 1 0 1 2 3 4 1] } func init () { buf := make ([] byte , initialBufSize ) sc . Buffer ( buf , bufio . MaxScanTokenSize ) sc . Split ( bufio . ScanWords ) } func next () string { sc . Scan () return sc . Text () } func nextInt () int { sc . Scan () i , e := strconv . Atoi ( sc . Text ()) if e != nil { panic ( e ) } return i } func fill ( a [] int , x int ) { a [ 0 ] = x for i := 1 ; i < len ( a ); i *= 2 { copy ( a [ i :], a [: i ]) } } \u53c2\u8003 \u00b6 https://www.slideshare.net/hcpc_hokudai/ss-62620083","title":"\u6700\u77ed\u7d4c\u8def\u8a70\u3081\u5408\u308f\u305b"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#tldr","text":"Go\u8a00\u8a9e\u3067 \u96a3\u63a5\u884c\u5217\u3092\u7528\u3044\u305f\u6700\u77ed\u7d4c\u8def\u5c0e\u51fa\u554f\u984c\u306e\u69d8\u3005\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u305f\u3002 \u5e45\u512a\u5148\u63a2\u7d22, \u30d9\u30eb\u30de\u30f3\u2013\u30d5\u30a9\u30fc\u30c9\u6cd5, \u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5, \u30d7\u30ea\u30e0\u6cd5","title":"tl;dr"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#_1","text":"\u9802\u70b9\u6570 V V \u306e\u6642\u3001 V = len(Adjlist) type pair struct { to , cost int } type Adjlist [][] pair","title":"\u5171\u901a\u90e8"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#priorityqueue","text":"https://golang.org/pkg/container/heap/ type PQ [] pair func ( pq PQ ) Len () int { return len ( pq ) } func ( pq PQ ) Less ( i , j int ) bool { return pq [ i ]. cost < pq [ j ]. cost } func ( pq PQ ) Swap ( i , j int ) { pq [ i ], pq [ j ] = pq [ j ], pq [ i ] } func ( pq * PQ ) Push ( x interface {}) { * pq = append ( * pq , x .( pair )) } func ( pq * PQ ) Pop () interface {} { old := * pq n := len ( old ) x := old [ n - 1 ] * pq = old [ 0 : n - 1 ] return x }","title":"PriorityQueue"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#_2","text":"\u6700\u3082\u57fa\u672c\u3068\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 result \u306e\u66f4\u65b0\u306f1\u5ea6\u3057\u304b\u884c\u308f\u308c\u306a\u3044\u306e\u3067\u3001 O(V) O(V) // s\u3000\u304b\u3089\u5404\u30ce\u30fc\u30c9\u3078\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8fd4\u3059 O(V) func ( al Adjlist ) bfs ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 for q := [] int { s }; len ( q ) > 0 ; { var p int p , q = q [ 0 ], q [ 1 :] for _ , np := range al [ p ] { if result [ np . to ] != INF { continue } result [ np . to ] = result [ p ] + 1 q = append ( q , np . to ) } } return result }","title":"\u5e45\u512a\u5148\u63a2\u7d22"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#_3","text":"\u5168\u3066\u306e\u9802\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u96a3\u3092\u898b\u3066\u3001\u3088\u308a\u5c0f\u3055\u3044\u5024\u3067\u9077\u79fb\u53ef\u80fd\u3067\u3042\u308c\u3070\u3001\u5024\u3092\u66f4\u65b0\u3059\u308b \u3053\u308c\u3092\u5168\u3066\u306e\u9802\u70b9\u306b\u304a\u3044\u3066\u66f4\u65b0\u304c\u8d77\u304d\u306a\u304f\u306a\u308b\u307e\u3067\u884c\u3046 \u4e00\u5468\u6bce\u306b\u5c11\u306a\u304f\u3068\u3082\u4e00\u3064\u306e\u3055\u6700\u5c0f\u30b3\u30b9\u30c8\u304c\u6c7a\u5b9a\u3059\u308b\u306e\u3067\u3001\u30eb\u30fc\u30d7\u56de\u6570\u306f\u6700\u5927 V \u3088\u3063\u3066\u8a08\u7b97\u91cf\u306f O(VE) O(VE) // s: \u958b\u59cb\u30ce\u30fc\u30c9\u3000(\u8ca0\u306e\u30b3\u30b9\u30c8\u304c\u542b\u307e\u308c\u308b\u5834\u5408) func ( al Adjlist ) bellman ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 for update := true ; update ; { update = false for i := range al { for _ , p := range al [ i ] { if result [ p . to ] > result [ i ] + p . cost { result [ p . to ] = result [ i ] + p . cost update = true } } } } return result }","title":"\u30d9\u30eb\u30de\u30f3\u2013\u30d5\u30a9\u30fc\u30c9\u6cd5"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#_4","text":"\u6700\u5c0f\u30b3\u30b9\u30c8\u30921\u30ce\u30fc\u30c9\u305a\u3064\u78ba\u5b9a\u3055\u305b\u3066\u3044\u304f \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc\u3092\u7528\u3044\u308b\u306e\u3067\u3001\u30ad\u30e5\u30fc\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f\u9802\u70b9\u306e\u5024\u304c\u66f8\u304d\u63db\u308f\u308b\u306e\u306f\u6700\u521d\u306e1\u5ea6\u306e\u307f \u5168\u3066\u306e\u8fba\u3092\u56de\u308b\u306e\u306b O(E) O(E) , \u30ad\u30e5\u30fc\u306e\u633f\u5165,\u524a\u9664\u3067 O(log\\, E) O(log\\, E) \u3088\u3063\u3066\u8a08\u7b97\u91cf\u306f O(E\\, log\\, E) O(E\\, log\\, E) // s: \u958b\u59cb\u30ce\u30fc\u30c9 (\u30b3\u30b9\u30c8\u304c\u5168\u3066\u6b63\u306e\u5834\u5408) func ( al Adjlist ) dijk ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 pq := new ( PQ ) heap . Init ( pq ) heap . Push ( pq , pair { s , 0 }) for pq . Len () > 0 { p := heap . Pop ( pq ).( pair ) if result [ p . to ] < p . cost { continue } for _ , np := range al [ p . to ] { nc := p . cost + np . cost if result [ np . to ] > nc { result [ np . to ] = nc heap . Push ( pq , pair { np . to , nc }) } } } return result }","title":"\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#_5","text":"\u6700\u5c0f\u6728\u3092\u9589\u8def\u3092\u4f5c\u3089\u306a\u3044\u6700\u5c0f\u30b3\u30b9\u30c8\u3067\u62e1\u5f35\u3057\u3066\u3044\u304f // \u9802\u70b9 s \u3092\u542b\u3080\u6700\u5c0f\u5168\u57df\u6728\u306e\u30b3\u30b9\u30c8\u3092\u8fd4\u3059 func ( al Adjlist ) prim ( s int ) int { v := len ( al ) result := make ([] int , v ) fill ( result , INF ) pq := new ( PQ ) heap . Init ( pq ) var length , size int result [ s ] = 0 heap . Push ( pq , pair { s , 0 }) for pq . Len () > 0 && size < v { p := heap . Pop ( pq ).( pair ) if result [ p . to ] < p . cost { continue } result [ p . to ] = - INF // used length += p . cost size ++ for _ , np := range al [ p . to ] { if result [ np . to ] > np . cost { result [ np . to ] = np . cost heap . Push ( pq , pair { np . to , np . cost }) } } } return length }","title":"\u30d7\u30ea\u30e0\u6cd5"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#_6","text":"package main import ( \"bufio\" \"bytes\" \"container/heap\" \"fmt\" \"strconv\" ) const ( initialBufSize = 1e4 INF = 1 << 60 ) var input = [] byte ( `10 12 4 9 90 3 4 210 3 1 90 1 0 210 4 5 120 5 3 30 5 6 90 6 1 120 7 6 120 7 8 150 2 1 210 2 7 180` ) var r = bytes . NewReader ( input ) var sc = bufio . NewScanner ( r ) type pair struct { to , cost int } type Adjlist [][] pair type PQ [] pair func ( pq PQ ) Len () int { return len ( pq ) } func ( pq PQ ) Less ( i , j int ) bool { return pq [ i ]. cost < pq [ j ]. cost } func ( pq PQ ) Swap ( i , j int ) { pq [ i ], pq [ j ] = pq [ j ], pq [ i ] } func ( pq * PQ ) Push ( x interface {}) { * pq = append ( * pq , x .( pair )) } func ( pq * PQ ) Pop () interface {} { old := * pq n := len ( old ) x := old [ n - 1 ] * pq = old [ 0 : n - 1 ] return x } // s\u3000\u304b\u3089\u5404\u30ce\u30fc\u30c9\u3078\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8fd4\u3059 O(V) func ( al Adjlist ) bfs ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 for q := [] int { s }; len ( q ) > 0 ; { var p int p , q = q [ 0 ], q [ 1 :] for _ , np := range al [ p ] { if result [ np . to ] != INF { continue } result [ np . to ] = result [ p ] + 1 q = append ( q , np . to ) } } return result } // s: \u958b\u59cb\u30ce\u30fc\u30c9 (\u30b3\u30b9\u30c8\u304c\u5168\u3066\u6b63\u306e\u5834\u5408) func ( al Adjlist ) dijk ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 pq := new ( PQ ) heap . Init ( pq ) heap . Push ( pq , pair { s , 0 }) for pq . Len () > 0 { p := heap . Pop ( pq ).( pair ) if result [ p . to ] < p . cost { continue } for _ , np := range al [ p . to ] { nc := p . cost + np . cost if result [ np . to ] > nc { result [ np . to ] = nc heap . Push ( pq , pair { np . to , nc }) } } } return result } // s: \u958b\u59cb\u30ce\u30fc\u30c9\u3000(\u8ca0\u306e\u30b3\u30b9\u30c8\u304c\u542b\u307e\u308c\u308b\u5834\u5408) func ( al Adjlist ) bellman ( s int ) [] int { result := make ([] int , len ( al )) fill ( result , INF ) result [ s ] = 0 for update := true ; update ; { update = false for i := range al { for _ , p := range al [ i ] { if result [ p . to ] > result [ i ] + p . cost { result [ p . to ] = result [ i ] + p . cost update = true } } } } return result } // \u9802\u70b9 s \u3092\u542b\u3080\u6700\u5c0f\u5168\u57df\u6728\u306e\u30b3\u30b9\u30c8\u3092\u8fd4\u3059 func ( al Adjlist ) prim ( s int ) int { v := len ( al ) result := make ([] int , v ) fill ( result , INF ) pq := new ( PQ ) heap . Init ( pq ) var length , size int result [ s ] = 0 heap . Push ( pq , pair { s , 0 }) for pq . Len () > 0 && size < v { p := heap . Pop ( pq ).( pair ) if result [ p . to ] < p . cost { continue } result [ p . to ] = - INF // used length += p . cost size ++ for _ , np := range al [ p . to ] { if result [ np . to ] > np . cost { result [ np . to ] = np . cost heap . Push ( pq , pair { np . to , np . cost }) } } } return length } func main () { V , E := nextInt (), nextInt () adjlist := make ( Adjlist , V ) for i := 0 ; i < E ; i ++ { a , b , c := nextInt (), nextInt (), nextInt () adjlist [ a ] = append ( adjlist [ a ], pair { b , c }) adjlist [ b ] = append ( adjlist [ b ], pair { a , c }) } fmt . Println ( adjlist . bellman ( 4 )) // [450 240 450 150 0 120 210 330 480 90] fmt . Println ( adjlist . dijk ( 4 )) // [450 240 450 150 0 120 210 330 480 90] fmt . Println ( adjlist . prim ( 4 )) // 1080 fmt . Println ( adjlist . bfs ( 4 )) // [3 2 3 1 0 1 2 3 4 1] } func init () { buf := make ([] byte , initialBufSize ) sc . Buffer ( buf , bufio . MaxScanTokenSize ) sc . Split ( bufio . ScanWords ) } func next () string { sc . Scan () return sc . Text () } func nextInt () int { sc . Scan () i , e := strconv . Atoi ( sc . Text ()) if e != nil { panic ( e ) } return i } func fill ( a [] int , x int ) { a [ 0 ] = x for i := 1 ; i < len ( a ); i *= 2 { copy ( a [ i :], a [: i ]) } }","title":"\u30b3\u30fc\u30c9"},{"location":"jack_in_the_box/algorithms/shortest_path_problem/#_7","text":"https://www.slideshare.net/hcpc_hokudai/ss-62620083","title":"\u53c2\u8003"},{"location":"jack_in_the_box/go2py/","text":"golang\u3068python\u306e\u5bfe\u5fdc\u8868\u307f\u305f\u3044\u306a\u3084\u3064 \u6c17\u304c\u5411\u3044\u305f\u3089\u66f4\u65b0","title":"Index"},{"location":"jack_in_the_box/go2py/strings/","text":"Repeat \u00b6 go s := \"a\" strings . Repeat ( s , 2 ) py s = \"a\" s * 2 Result: \u00b6 aa HasPrefix \u00b6 go a , b := \"Gopher\" , \"Go\" strings . HasPrefix ( a , b ) py a , b = \"Gopher\" , \"Go\" a . startswith ( b ) Result: \u00b6 true HasSuffix \u00b6 go a , b := \"Python\" , \"on\" strings . HasSuffix ( a , b ) py a , b = \"Python\" , \"on\" a . endswith ( b ) Result: \u00b6 true","title":"\u6587\u5b57\u5217\u64cd\u4f5c"},{"location":"jack_in_the_box/go2py/strings/#repeat","text":"go s := \"a\" strings . Repeat ( s , 2 ) py s = \"a\" s * 2","title":"Repeat"},{"location":"jack_in_the_box/go2py/strings/#result","text":"aa","title":"Result:"},{"location":"jack_in_the_box/go2py/strings/#hasprefix","text":"go a , b := \"Gopher\" , \"Go\" strings . HasPrefix ( a , b ) py a , b = \"Gopher\" , \"Go\" a . startswith ( b )","title":"HasPrefix"},{"location":"jack_in_the_box/go2py/strings/#result_1","text":"true","title":"Result:"},{"location":"jack_in_the_box/go2py/strings/#hassuffix","text":"go a , b := \"Python\" , \"on\" strings . HasSuffix ( a , b ) py a , b = \"Python\" , \"on\" a . endswith ( b )","title":"HasSuffix"},{"location":"jack_in_the_box/go2py/strings/#result_2","text":"true","title":"Result:"},{"location":"tags/ARC/","text":"","title":"ARC"},{"location":"tags/AtCoder/","text":"","title":"AtCoder"},{"location":"tags/golang/","text":"","title":"golang"},{"location":"tags/python/","text":"","title":"python"}]}