{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Hello World!"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/","text":"\u30d1\u30ca\u30bd\u30cb\u30c3\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\uff08AtCoder Beginner Contest 186\uff09 \u632f\u308a\u8fd4\u308a \u00b6 11:21\u30673\u5b8c\u4e0b\u6ed1\u308a\u51fa\u3057\u306f\u826f\u304b\u3063\u305f\u304c\u3001D\u554f\u984c\u3067\u7d76\u5bfe\u5024\u306e\u8003\u616e\u3092\u305b\u305a\u306b\u8a08\u7b97\u3057\u3001\u5024\u304c\u3042\u308f\u305a\u767a\u72c2\u3057\u3066\u6642\u9593\u3092\u98df\u3063\u3066\u3057\u307e\u3063\u305f\u3002 A - Brick \u00b6 \u554f\u984c\u6587: A - Brick \u8003\u3048\u305f\u3053\u3068 \u00b6 \u6574\u6570\u306e\u5207\u308a\u6368\u3066\u9664\u7b97 Note \u5165\u529b\u4f8b \u00b6 10 3 \u51fa\u529b\u4f8b \u00b6 3 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n , w := ni (), ni () fmt . Println ( n / w ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } B - Blocks on Grid \u00b6 \u554f\u984c\u6587: B - Blocks on Grid \u8003\u3048\u305f\u3053\u3068 \u00b6 \u30b0\u30ea\u30c3\u30c9\u72b6\u306e\u30de\u30b9\u76ee\u81ea\u4f53\u306b\u610f\u5473\u306f\u306a\u3044\u306e\u30671\u6b21\u5143\u914d\u5217\u3067\u5168\u8981\u7d20\u306e\u6700\u5c0f\u5024\u3068\u5408\u8a08\u5024\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u89e3\u304f\u3002 \u5168\u3066\u306e\u5024\u3092\u6700\u5c0f\u5024\u306b\u308c\u3070\u3044\u3044\u306e\u3067 \\sum_{i=0}^{HW}A_i-min(A) = sum(A)-min(A)\\times H\\times W \\sum_{i=0}^{HW}A_i-min(A) = sum(A)-min(A)\\times H\\times W Note \u5165\u529b\u4f8b \u00b6 2 3 2 2 3 3 2 2 \u51fa\u529b\u4f8b \u00b6 2 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) func main () { h , w := ni (), ni () a := nis ( h * w ) min := min ( a ... ) sum := sum ( a ... ) fmt . Println ( sum - min * h * w ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int ; res := make ([] int , size ); for i := range res { fmt . Fscan ( r , & n ); res [ i ]= n }; return res } func min ( a ... int ) int { if len ( a ) == 0 { return 0 }; ret := a [ 0 ]; for _ , e := range a { if e < ret { ret = e }}; return ret } func sum ( a ... int )( sum int ){ for _ , e := range a { sum += e }; return } C - Unlucky 7 \u00b6 \u554f\u984c\u6587: C - Unlucky 7 \u8003\u3048\u305f\u3053\u3068 \u00b6 \u6574\u6570 1~N 1~N \u306b\u3064\u3044\u306610\u9032\u6570\u30688\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u306b\u5bfe\u3057\u30667\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u6587\u5b57\u5217\u64cd\u4f5c Go\u8a00\u8a9e\u3067\u306f fmt.Sprintf(\"%o\", i) \u30678\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 Note \u5165\u529b\u4f8b \u00b6 100000 \u51fa\u529b\u4f8b \u00b6 30555 AC package main import ( \"bufio\" \"fmt\" \"os\" \"strings\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () fmt . Println ( solve ( n )) } func solve ( n int ) ( ans int ) { for i := 1 ; i <= n ; i ++ { if s := fmt . Sprintf ( \"%o\" , i ); strings . Contains ( s , \"7\" ) { continue } if s := fmt . Sprintf ( \"%d\" , i ); strings . Contains ( s , \"7\" ) { continue } ans ++ } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } D - Sum of difference \u00b6 \u554f\u984c\u6587: D - Sum of difference \u8003\u3048\u305f\u3053\u3068 \u00b6 N\\leq 2\\times 10^5 N\\leq 2\\times 10^5 \u306a\u306e\u3067 i,j i,j \u3092\u5168\u3066\u8a66\u3059 O(N^2) O(N^2) \u306f\u9593\u306b\u5408\u308f\u306a\u3044\u3002 \u5168\u3066\u306e i, j i, j \u3092\u8a66\u3059\u306e\u3067 A A \u306e\u8981\u7d20\u306f\u30bd\u30fc\u30c8\u3057\u3066\u3082\u7d50\u679c\u306f\u5909\u308f\u3089\u305a\u3001\u30bd\u30fc\u30c8\u3092\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u7d76\u5bfe\u5024\u3092\u8003\u616e\u3057\u306a\u304f\u3066\u826f\u304f\u306a\u308b\u3002 Note \u5165\u529b\u4f8b \u00b6 5 31 41 59 26 53 \u51fa\u529b\u4f8b \u00b6 176 AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () a := nis ( n ) sort . Ints ( a ) fmt . Println ( solve ( n , a )) } func solve ( n int , a [] int ) ( ans int ) { suma := sum ( a ... ) for i := 0 ; i < n - 1 ; i ++ { suma -= a [ i ] c := a [ i ] * ( n - 1 - i ) c -= suma ans += - c } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } func sum ( a ... int ) ( sum int ) { for _ , e := range a { sum += e } return }","title":"\u3010ABC110\u3011A~D\u554f\u984c"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_1","text":"11:21\u30673\u5b8c\u4e0b\u6ed1\u308a\u51fa\u3057\u306f\u826f\u304b\u3063\u305f\u304c\u3001D\u554f\u984c\u3067\u7d76\u5bfe\u5024\u306e\u8003\u616e\u3092\u305b\u305a\u306b\u8a08\u7b97\u3057\u3001\u5024\u304c\u3042\u308f\u305a\u767a\u72c2\u3057\u3066\u6642\u9593\u3092\u98df\u3063\u3066\u3057\u307e\u3063\u305f\u3002","title":"\u632f\u308a\u8fd4\u308a"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#a-brick","text":"\u554f\u984c\u6587: A - Brick","title":"A - Brick"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_2","text":"\u6574\u6570\u306e\u5207\u308a\u6368\u3066\u9664\u7b97 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_3","text":"10 3","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_4","text":"3 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n , w := ni (), ni () fmt . Println ( n / w ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#b-blocks-on-grid","text":"\u554f\u984c\u6587: B - Blocks on Grid","title":"B - Blocks on Grid"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_5","text":"\u30b0\u30ea\u30c3\u30c9\u72b6\u306e\u30de\u30b9\u76ee\u81ea\u4f53\u306b\u610f\u5473\u306f\u306a\u3044\u306e\u30671\u6b21\u5143\u914d\u5217\u3067\u5168\u8981\u7d20\u306e\u6700\u5c0f\u5024\u3068\u5408\u8a08\u5024\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u89e3\u304f\u3002 \u5168\u3066\u306e\u5024\u3092\u6700\u5c0f\u5024\u306b\u308c\u3070\u3044\u3044\u306e\u3067 \\sum_{i=0}^{HW}A_i-min(A) = sum(A)-min(A)\\times H\\times W \\sum_{i=0}^{HW}A_i-min(A) = sum(A)-min(A)\\times H\\times W Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_6","text":"2 3 2 2 3 3 2 2","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_7","text":"2 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) func main () { h , w := ni (), ni () a := nis ( h * w ) min := min ( a ... ) sum := sum ( a ... ) fmt . Println ( sum - min * h * w ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int ; res := make ([] int , size ); for i := range res { fmt . Fscan ( r , & n ); res [ i ]= n }; return res } func min ( a ... int ) int { if len ( a ) == 0 { return 0 }; ret := a [ 0 ]; for _ , e := range a { if e < ret { ret = e }}; return ret } func sum ( a ... int )( sum int ){ for _ , e := range a { sum += e }; return }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#c-unlucky-7","text":"\u554f\u984c\u6587: C - Unlucky 7","title":"C - Unlucky 7"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_8","text":"\u6574\u6570 1~N 1~N \u306b\u3064\u3044\u306610\u9032\u6570\u30688\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u306b\u5bfe\u3057\u30667\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u6587\u5b57\u5217\u64cd\u4f5c Go\u8a00\u8a9e\u3067\u306f fmt.Sprintf(\"%o\", i) \u30678\u9032\u6570\u306e\u6587\u5b57\u5217\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_9","text":"100000","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_10","text":"30555 AC package main import ( \"bufio\" \"fmt\" \"os\" \"strings\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () fmt . Println ( solve ( n )) } func solve ( n int ) ( ans int ) { for i := 1 ; i <= n ; i ++ { if s := fmt . Sprintf ( \"%o\" , i ); strings . Contains ( s , \"7\" ) { continue } if s := fmt . Sprintf ( \"%d\" , i ); strings . Contains ( s , \"7\" ) { continue } ans ++ } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#d-sum-of-difference","text":"\u554f\u984c\u6587: D - Sum of difference","title":"D - Sum of difference"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_11","text":"N\\leq 2\\times 10^5 N\\leq 2\\times 10^5 \u306a\u306e\u3067 i,j i,j \u3092\u5168\u3066\u8a66\u3059 O(N^2) O(N^2) \u306f\u9593\u306b\u5408\u308f\u306a\u3044\u3002 \u5168\u3066\u306e i, j i, j \u3092\u8a66\u3059\u306e\u3067 A A \u306e\u8981\u7d20\u306f\u30bd\u30fc\u30c8\u3057\u3066\u3082\u7d50\u679c\u306f\u5909\u308f\u3089\u305a\u3001\u30bd\u30fc\u30c8\u3092\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u7d76\u5bfe\u5024\u3092\u8003\u616e\u3057\u306a\u304f\u3066\u826f\u304f\u306a\u308b\u3002 Note","title":"\u8003\u3048\u305f\u3053\u3068"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_12","text":"5 31 41 59 26 53","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/AtCoderBeginnerContest/ABC186_a2c/#_13","text":"176 AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) func main () { n := ni () a := nis ( n ) sort . Ints ( a ) fmt . Println ( solve ( n , a )) } func solve ( n int , a [] int ) ( ans int ) { suma := sum ( a ... ) for i := 0 ; i < n - 1 ; i ++ { suma -= a [ i ] c := a [ i ] * ( n - 1 - i ) c -= suma ans += - c } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } func sum ( a ... int ) ( sum int ) { for _ , e := range a { sum += e } return }","title":"\u51fa\u529b\u4f8b"},{"location":"AtCoder/AtCoderRegularContest/ARC110/b/","text":"AC package main import ( \"bufio\" \"fmt\" \"os\" \"strings\" ) var r = bufio . NewReader ( os . Stdin ) func main () { fmt . Println ( solve ()) } func solve () int { N := ni () T := ns () if N == 1 { switch T { case \"1\" : return 2e10 case \"0\" : return 1e10 default : return 0 } } var f func ( a , b string ) bool f = strings . HasPrefix if f ( T , \"10\" ) { T = \"1\" + T } else if f ( T , \"01\" ) { T = \"11\" + T } f = strings . HasSuffix if f ( T , \"11\" ) { T += \"0\" } else if f ( T , \"01\" ) { T += \"10\" } if T == strings . Repeat ( \"110\" , len ( T ) / 3 ) { return 1e10 - len ( T ) / 3 + 1 } return 0 } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s }","title":"\u3010ARC110\u3011B - Many 110"},{"location":"AtCoder/PAST/past201912_a/","text":"\u554f\u984c\u6982\u8981 \u00b6 A - 2 \u500d\u30c1\u30a7\u30c3\u30af \u8003\u3048\u65b9 \u00b6 strconv.Atoi \u306b\u6574\u6570\u5909\u63db\u3092\u4e38\u6295\u3052\u3057\u3066\u3001\u6210\u529f\u3059\u308c\u30702\u500d\u306b\u3057\u3066\u8fd4\u3059\u3001\u5931\u6557\u3059\u308c\u3070 error \u3092\u8fd4\u3059\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" \"strconv\" ) var r = bufio . NewReader ( os . Stdin ) func main () { S := ns () fmt . Println ( solve ( S )) } func solve ( S string ) string { i , err := strconv . Atoi ( S ) if err != nil { return \"error\" } return strconv . Itoa ( i * 2 ) } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s } submission","title":"\u3010PAST#01\u3011A - 2 \u500d\u30c1\u30a7\u30c3\u30af"},{"location":"AtCoder/PAST/past201912_a/#_1","text":"A - 2 \u500d\u30c1\u30a7\u30c3\u30af","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_a/#_2","text":"strconv.Atoi \u306b\u6574\u6570\u5909\u63db\u3092\u4e38\u6295\u3052\u3057\u3066\u3001\u6210\u529f\u3059\u308c\u30702\u500d\u306b\u3057\u3066\u8fd4\u3059\u3001\u5931\u6557\u3059\u308c\u3070 error \u3092\u8fd4\u3059\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" \"strconv\" ) var r = bufio . NewReader ( os . Stdin ) func main () { S := ns () fmt . Println ( solve ( S )) } func solve ( S string ) string { i , err := strconv . Atoi ( S ) if err != nil { return \"error\" } return strconv . Itoa ( i * 2 ) } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_b/","text":"\u554f\u984c\u6982\u8981 \u00b6 B - \u5897\u6e1b\u7ba1\u7406 \u8003\u3048\u65b9 \u00b6 A_{i+1} A_{i+1} \u3068 A_i A_i \u306e\u5224\u5b9a\u3092 N-1 N-1 \u56de\u884c\u3046\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N int var A [] int func main () { N = ni () A = nis ( N ) solve () } func solve () { for i := 0 ; i < N - 1 ; i ++ { fmt . Println ( check ( i )) } } func check ( i int ) string { a := A [ i + 1 ] - A [ i ] switch { case a == 0 : return \"stay\" case a < 0 : return fmt . Sprintf ( \"down %d\" , - a ) default : return fmt . Sprintf ( \"up %d\" , a ) } } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u3010PAST#01\u3011B - \u5897\u6e1b\u7ba1\u7406"},{"location":"AtCoder/PAST/past201912_b/#_1","text":"B - \u5897\u6e1b\u7ba1\u7406","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_b/#_2","text":"A_{i+1} A_{i+1} \u3068 A_i A_i \u306e\u5224\u5b9a\u3092 N-1 N-1 \u56de\u884c\u3046\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N int var A [] int func main () { N = ni () A = nis ( N ) solve () } func solve () { for i := 0 ; i < N - 1 ; i ++ { fmt . Println ( check ( i )) } } func check ( i int ) string { a := A [ i + 1 ] - A [ i ] switch { case a == 0 : return \"stay\" case a < 0 : return fmt . Sprintf ( \"down %d\" , - a ) default : return fmt . Sprintf ( \"up %d\" , a ) } } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_c/","text":"\u554f\u984c\u6982\u8981 \u00b6 C - 3 \u756a\u76ee \u8003\u3048\u65b9 \u00b6 \u30bd\u30fc\u30c8\u3057\u30663\u756a\u76ee(\u6607\u98064\u756a\u76ee) AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) func main () { solve () } func solve () { A := nis ( 6 ) sort . Ints ( A ) fmt . Println ( A [ 3 ]) } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u3010PAST#01\u3011C - 3 \u756a\u76ee"},{"location":"AtCoder/PAST/past201912_c/#_1","text":"C - 3 \u756a\u76ee","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_c/#_2","text":"\u30bd\u30fc\u30c8\u3057\u30663\u756a\u76ee(\u6607\u98064\u756a\u76ee) AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" ) var r = bufio . NewReader ( os . Stdin ) func main () { solve () } func solve () { A := nis ( 6 ) sort . Ints ( A ) fmt . Println ( A [ 3 ]) } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_d/","text":"\u554f\u984c\u6982\u8981 \u00b6 D - \u91cd\u8907\u691c\u67fb \u8003\u3048\u65b9 \u00b6 \u6574\u6570\u5217 A A \u3092 1 1 \u304b\u3089 N N \u307e\u3067\u8d70\u67fb\u3057\u3066\u66f8\u304d\u63db\u3048\u304c\u306a\u3051\u308c\u3070 Correct \u66f8\u304d\u63db\u3048\u304c\u3042\u308c\u3070\u66f8\u304d\u63db\u308f\u3063\u305f\u6587\u5b57\u3092\u63a2\u7d22\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N int var A [] int func main () { N = ni () A = nis ( N ) fmt . Println ( solve ()) } func solve () string { MAP := make ([] bool , N ) x , y := - 1 , - 1 for _ , e := range A { if ! MAP [ e - 1 ] { MAP [ e - 1 ] = true } else { x = e } } if x == - 1 { return \"Correct\" } for i , e := range MAP { if ! e { y = i + 1 break } } return fmt . Sprintf ( \"%d %d\" , x , y ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u3010PAST#01\u3011D - \u91cd\u8907\u691c\u67fb"},{"location":"AtCoder/PAST/past201912_d/#_1","text":"D - \u91cd\u8907\u691c\u67fb","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_d/#_2","text":"\u6574\u6570\u5217 A A \u3092 1 1 \u304b\u3089 N N \u307e\u3067\u8d70\u67fb\u3057\u3066\u66f8\u304d\u63db\u3048\u304c\u306a\u3051\u308c\u3070 Correct \u66f8\u304d\u63db\u3048\u304c\u3042\u308c\u3070\u66f8\u304d\u63db\u308f\u3063\u305f\u6587\u5b57\u3092\u63a2\u7d22\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N int var A [] int func main () { N = ni () A = nis ( N ) fmt . Println ( solve ()) } func solve () string { MAP := make ([] bool , N ) x , y := - 1 , - 1 for _ , e := range A { if ! MAP [ e - 1 ] { MAP [ e - 1 ] = true } else { x = e } } if x == - 1 { return \"Correct\" } for i , e := range MAP { if ! e { y = i + 1 break } } return fmt . Sprintf ( \"%d %d\" , x , y ) } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } func nis ( size int ) [] int { var n int res := make ([] int , size ) for i := range res { fmt . Fscan ( r , & n ) res [ i ] = n } return res } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_e/","text":"\u554f\u984c\u6982\u8981 \u00b6 E - SNS \u306e\u30ed\u30b0 \u8003\u3048\u65b9 \u00b6 N\\leq 100 N\\leq 100 , Q\\leq 500 Q\\leq 500 \u306a\u306e\u3067\u611a\u76f4\u306b\u8a08\u7b97\u3057\u3066\u3082\u9593\u306b\u5408\u3044\u305d\u3046\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N , M int var MAT [][] rune func main () { N , M = ni (), ni () MAT = make ([][] rune , N ) for i := range MAT { MAT [ i ] = make ([] rune , N ) for j := range MAT [ i ] { MAT [ i ][ j ] = 'N' } } solve () } func solve () { for i := 0 ; i < M ; i ++ { a := ni () b := ni () - 1 switch a { case 1 : c := ni () - 1 follow ( b , c ) case 2 : followBackAll ( b ) case 3 : followFollow ( b ) } } for i := range MAT { fmt . Println ( string ( MAT [ i ])) } } func follow ( a , b int ) { MAT [ a ][ b ] = 'Y' } func followBackAll ( a int ) { for _ , b := range getFollower ( a ) { follow ( a , b ) } } func followFollow ( a int ) { for _ , e1 := range getFollows ( a ) { for _ , e2 := range getFollows ( e1 ) { if e2 == a { continue } follow ( a , e2 ) } } } // n\u3092\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u4eba\u306eidx\u3092\u8fd4\u3059 func getFollower ( n int ) ( ret [] int ) { for i := 0 ; i < N ; i ++ { if MAT [ i ][ n ] == 'Y' { ret = append ( ret , i ) } } return } // n\u304c\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u4eba\u306eidx\u3092\u8fd4\u3059 func getFollows ( n int ) ( ret [] int ) { for i := 0 ; i < N ; i ++ { if MAT [ n ][ i ] == 'Y' { ret = append ( ret , i ) } } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } submission","title":"\u3010PAST#01\u3011E - SNS \u306e\u30ed\u30b0"},{"location":"AtCoder/PAST/past201912_e/#_1","text":"E - SNS \u306e\u30ed\u30b0","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_e/#_2","text":"N\\leq 100 N\\leq 100 , Q\\leq 500 Q\\leq 500 \u306a\u306e\u3067\u611a\u76f4\u306b\u8a08\u7b97\u3057\u3066\u3082\u9593\u306b\u5408\u3044\u305d\u3046\u3002 AC package main import ( \"bufio\" \"fmt\" \"os\" ) var r = bufio . NewReader ( os . Stdin ) var N , M int var MAT [][] rune func main () { N , M = ni (), ni () MAT = make ([][] rune , N ) for i := range MAT { MAT [ i ] = make ([] rune , N ) for j := range MAT [ i ] { MAT [ i ][ j ] = 'N' } } solve () } func solve () { for i := 0 ; i < M ; i ++ { a := ni () b := ni () - 1 switch a { case 1 : c := ni () - 1 follow ( b , c ) case 2 : followBackAll ( b ) case 3 : followFollow ( b ) } } for i := range MAT { fmt . Println ( string ( MAT [ i ])) } } func follow ( a , b int ) { MAT [ a ][ b ] = 'Y' } func followBackAll ( a int ) { for _ , b := range getFollower ( a ) { follow ( a , b ) } } func followFollow ( a int ) { for _ , e1 := range getFollows ( a ) { for _ , e2 := range getFollows ( e1 ) { if e2 == a { continue } follow ( a , e2 ) } } } // n\u3092\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u4eba\u306eidx\u3092\u8fd4\u3059 func getFollower ( n int ) ( ret [] int ) { for i := 0 ; i < N ; i ++ { if MAT [ i ][ n ] == 'Y' { ret = append ( ret , i ) } } return } // n\u304c\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u4eba\u306eidx\u3092\u8fd4\u3059 func getFollows ( n int ) ( ret [] int ) { for i := 0 ; i < N ; i ++ { if MAT [ n ][ i ] == 'Y' { ret = append ( ret , i ) } } return } func ni () int { var n int ; fmt . Fscan ( r , & n ); return n } submission","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_f/","text":"\u554f\u984c\u6982\u8981 \u00b6 F - DoubleCamelCase Sort \u8003\u3048\u65b9 \u00b6 \u6700\u521d\u306e\u6587\u5b57\u3068\u6700\u5f8c\u306e\u6587\u5b57\u306e\u307f\u304c\u82f1\u5927\u6587\u5b57\u306a\u306e\u3067, \u82f1\u5927\u6587\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u7b87\u6240\u3067\u5206\u5272\u3059\u308b\u3002 \u7d42\u4e86\u4f4d\u7f6e\u304c\u62fe\u3048\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u82f1\u5927\u6587\u5b57\u306e\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u3051\u308b\u3002 \u5206\u5272\u3057\u305f\u6587\u5b57\u5217\u3092\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u306f\u7121\u8996\u3057\u3066\u8f9e\u66f8\u9806\u30bd\u30fc\u30c8\u3001\u518d\u7d50\u5408\u3002 Note \u5165\u529b\u4f8b \u00b6 FisHDoGCaTAAAaAAbCAC \u51fa\u529b\u4f8b \u00b6 AAAaAAbCACCaTDoGFisH AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" \"strings\" \"unicode\" ) var r = bufio . NewReader ( os . Stdin ) func main () { S := ns () solve ( S ) } func solve ( s string ) { rs := [] rune ( s + \"A\" ) ss := [] string {} var a int for i := 0 ; i < len ( rs ) - 1 ; i ++ { if unicode . IsUpper ( rs [ i ]) && unicode . IsUpper ( rs [ i + 1 ]) { if i + 1 - a < 2 { continue } ss = append ( ss , string ( rs [ a : i + 1 ])) a = i + 1 } } sort . Slice ( ss , func ( i , j int ) bool { return strings . ToLower ( ss [ i ]) < strings . ToLower ( ss [ j ]) }) fmt . Println ( strings . Join ( ss , \"\" )) } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s } submission","title":"\u3010PAST#01\u3011F - DoubleCamelCase Sort"},{"location":"AtCoder/PAST/past201912_f/#_1","text":"F - DoubleCamelCase Sort","title":"\u554f\u984c\u6982\u8981"},{"location":"AtCoder/PAST/past201912_f/#_2","text":"\u6700\u521d\u306e\u6587\u5b57\u3068\u6700\u5f8c\u306e\u6587\u5b57\u306e\u307f\u304c\u82f1\u5927\u6587\u5b57\u306a\u306e\u3067, \u82f1\u5927\u6587\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u7b87\u6240\u3067\u5206\u5272\u3059\u308b\u3002 \u7d42\u4e86\u4f4d\u7f6e\u304c\u62fe\u3048\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u82f1\u5927\u6587\u5b57\u306e\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u3051\u308b\u3002 \u5206\u5272\u3057\u305f\u6587\u5b57\u5217\u3092\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u306f\u7121\u8996\u3057\u3066\u8f9e\u66f8\u9806\u30bd\u30fc\u30c8\u3001\u518d\u7d50\u5408\u3002 Note","title":"\u8003\u3048\u65b9"},{"location":"AtCoder/PAST/past201912_f/#_3","text":"FisHDoGCaTAAAaAAbCAC","title":"\u5165\u529b\u4f8b"},{"location":"AtCoder/PAST/past201912_f/#_4","text":"AAAaAAbCACCaTDoGFisH AC package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" \"strings\" \"unicode\" ) var r = bufio . NewReader ( os . Stdin ) func main () { S := ns () solve ( S ) } func solve ( s string ) { rs := [] rune ( s + \"A\" ) ss := [] string {} var a int for i := 0 ; i < len ( rs ) - 1 ; i ++ { if unicode . IsUpper ( rs [ i ]) && unicode . IsUpper ( rs [ i + 1 ]) { if i + 1 - a < 2 { continue } ss = append ( ss , string ( rs [ a : i + 1 ])) a = i + 1 } } sort . Slice ( ss , func ( i , j int ) bool { return strings . ToLower ( ss [ i ]) < strings . ToLower ( ss [ j ]) }) fmt . Println ( strings . Join ( ss , \"\" )) } func ns () string { var s string ; fmt . Fscan ( r , & s ); return s } submission","title":"\u51fa\u529b\u4f8b"},{"location":"blog/201208_01/","text":"package main import \"fmt\" func main () { fmt . Println ( \"Hello, World!\" ) } Tutorial: Get started with Go - The Go Programming Language fmt.Println \u306f\u306a\u306b\u3092\u3057\u3066\u3044\u308b\u306e\u304b \u00b6 src/fmt/print.go: Println // Println formats using the default formats for its operands and writes to standard output. // Spaces are always added between operands and a newline is appended. // It returns the number of bytes written and any write error encountered. func Println ( a ... interface {}) ( n int , err error ) { return Fprintln ( os . Stdout , a ... ) } \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u308b\u3068 fmt.Println \u306f fmt.Fprintln \u3092\u30e9\u30c3\u30d7\u3057\u3066\u3001\u66f8\u304d\u8fbc\u307f\u30d0\u30a4\u30c8\u6570\u3068\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3088\u3046\u3067\u3059\u3002 \u8a66\u3057\u306b\u5909\u3048\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 package main import ( \"fmt\" ) func main () { n , err := fmt . Println ( \"Hello, World!\" ) fmt . Println ( n ) fmt . Println ( err ) } Hello, World! 14 <nil> fmt.Fprintln \u306f\u306a\u306b\u3092\u3057\u3066\u3044\u308b\u306e\u304b \u00b6 src/fmt/print.go: Fprintln // Fprintln formats using the default formats for its operands and writes to w. // Spaces are always added between operands and a newline is appended. // It returns the number of bytes written and any write error encountered. func Fprintln ( w io . Writer , a ... interface {}) ( n int , err error ) { p := newPrinter () p . doPrintln ( a ) n , err = w . Write ( p . buf ) p . free () return } // newPrinter allocates a new pp struct or grabs a cached one. func newPrinter () * pp { p := ppFree . Get ().( * pp ) p . panicking = false p . erroring = false p . wrapErrs = false p . fmt . init ( & p . buf ) return p } // pp is used to store a printer's state and is reused with sync.Pool to avoid allocations. type pp struct { buf buffer // arg holds the current item, as an interface{}. arg interface {} // value is used instead of arg for reflect values. value reflect . Value // fmt is used to format basic items such as integers or strings. fmt fmt // reordered records whether the format string used argument reordering. reordered bool // goodArgNum records whether the most recent reordering directive was valid. goodArgNum bool // panicking is set by catchPanic to avoid infinite panic, recover, panic, ... recursion. panicking bool // erroring is set when printing an error string to guard against calling handleMethods. erroring bool // wrapErrs is set when the format string may contain a %w verb. wrapErrs bool // wrappedErr records the target of the %w verb. wrappedErr error } var ppFree = sync . Pool { New : func () interface {} { return new ( pp ) }, }","title":"My Document"},{"location":"blog/201208_01/#fmtprintln","text":"src/fmt/print.go: Println // Println formats using the default formats for its operands and writes to standard output. // Spaces are always added between operands and a newline is appended. // It returns the number of bytes written and any write error encountered. func Println ( a ... interface {}) ( n int , err error ) { return Fprintln ( os . Stdout , a ... ) } \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u308b\u3068 fmt.Println \u306f fmt.Fprintln \u3092\u30e9\u30c3\u30d7\u3057\u3066\u3001\u66f8\u304d\u8fbc\u307f\u30d0\u30a4\u30c8\u6570\u3068\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3088\u3046\u3067\u3059\u3002 \u8a66\u3057\u306b\u5909\u3048\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 package main import ( \"fmt\" ) func main () { n , err := fmt . Println ( \"Hello, World!\" ) fmt . Println ( n ) fmt . Println ( err ) } Hello, World! 14 <nil>","title":"fmt.Println \u306f\u306a\u306b\u3092\u3057\u3066\u3044\u308b\u306e\u304b"},{"location":"blog/201208_01/#fmtfprintln","text":"src/fmt/print.go: Fprintln // Fprintln formats using the default formats for its operands and writes to w. // Spaces are always added between operands and a newline is appended. // It returns the number of bytes written and any write error encountered. func Fprintln ( w io . Writer , a ... interface {}) ( n int , err error ) { p := newPrinter () p . doPrintln ( a ) n , err = w . Write ( p . buf ) p . free () return } // newPrinter allocates a new pp struct or grabs a cached one. func newPrinter () * pp { p := ppFree . Get ().( * pp ) p . panicking = false p . erroring = false p . wrapErrs = false p . fmt . init ( & p . buf ) return p } // pp is used to store a printer's state and is reused with sync.Pool to avoid allocations. type pp struct { buf buffer // arg holds the current item, as an interface{}. arg interface {} // value is used instead of arg for reflect values. value reflect . Value // fmt is used to format basic items such as integers or strings. fmt fmt // reordered records whether the format string used argument reordering. reordered bool // goodArgNum records whether the most recent reordering directive was valid. goodArgNum bool // panicking is set by catchPanic to avoid infinite panic, recover, panic, ... recursion. panicking bool // erroring is set when printing an error string to guard against calling handleMethods. erroring bool // wrapErrs is set when the format string may contain a %w verb. wrapErrs bool // wrappedErr records the target of the %w verb. wrappedErr error } var ppFree = sync . Pool { New : func () interface {} { return new ( pp ) }, }","title":"fmt.Fprintln \u306f\u306a\u306b\u3092\u3057\u3066\u3044\u308b\u306e\u304b"},{"location":"jack_in_the_box/go2py/","text":"golang\u3068python\u306e\u5bfe\u5fdc\u8868\u307f\u305f\u3044\u306a\u3084\u3064 \u6c17\u304c\u5411\u3044\u305f\u3089\u66f4\u65b0","title":"Index"},{"location":"jack_in_the_box/go2py/strings/","text":"Repeat \u00b6 go s := \"a\" strings . Repeat ( s , 2 ) py s = \"a\" s * 2 Result: \u00b6 aa HasPrefix \u00b6 go a , b := \"Gopher\" , \"Go\" strings . HasPrefix ( a , b ) py a , b = \"Gopher\" , \"Go\" a . startswith ( b ) Result: \u00b6 true HasSuffix \u00b6 go a , b := \"Python\" , \"on\" strings . HasSuffix ( a , b ) py a , b = \"Python\" , \"on\" a . endswith ( b ) Result: \u00b6 true","title":"\u6587\u5b57\u5217\u64cd\u4f5c"},{"location":"jack_in_the_box/go2py/strings/#repeat","text":"go s := \"a\" strings . Repeat ( s , 2 ) py s = \"a\" s * 2","title":"Repeat"},{"location":"jack_in_the_box/go2py/strings/#result","text":"aa","title":"Result:"},{"location":"jack_in_the_box/go2py/strings/#hasprefix","text":"go a , b := \"Gopher\" , \"Go\" strings . HasPrefix ( a , b ) py a , b = \"Gopher\" , \"Go\" a . startswith ( b )","title":"HasPrefix"},{"location":"jack_in_the_box/go2py/strings/#result_1","text":"true","title":"Result:"},{"location":"jack_in_the_box/go2py/strings/#hassuffix","text":"go a , b := \"Python\" , \"on\" strings . HasSuffix ( a , b ) py a , b = \"Python\" , \"on\" a . endswith ( b )","title":"HasSuffix"},{"location":"jack_in_the_box/go2py/strings/#result_2","text":"true","title":"Result:"},{"location":"tags/ARC/","text":"","title":"ARC"},{"location":"tags/AtCoder/","text":"","title":"AtCoder"},{"location":"tags/golang/","text":"","title":"golang"},{"location":"tags/python/","text":"","title":"python"}]}